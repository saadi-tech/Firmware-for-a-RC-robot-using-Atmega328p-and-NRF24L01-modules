
rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000306  00800100  00000d6e  00000e02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800406  00800406  00001108  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d7e  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b91  00000000  00000000  00004026  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d96  00000000  00000000  00004bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00005950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070e  00000000  00000000  00005d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016f6  00000000  00000000  0000644e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00007b44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	14 e0       	ldi	r17, 0x04	; 4
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b4 e0       	ldi	r27, 0x04	; 4
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  9e:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_rf>:
}

void process_message(char *message) {
	
	
	serial_writeln(message);
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	0e 94 17 01 	call	0x22e	; 0x22e <nRF24L01_init>
  ae:	ec 01       	movw	r28, r24
  b0:	85 e2       	ldi	r24, 0x25	; 37
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	99 83       	std	Y+1, r25	; 0x01
  b6:	88 83       	st	Y, r24
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	2a 83       	std	Y+2, r18	; 0x02
  bc:	9c 83       	std	Y+4, r25	; 0x04
  be:	8b 83       	std	Y+3, r24	; 0x03
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	2d 83       	std	Y+5, r18	; 0x05
  c4:	9f 83       	std	Y+7, r25	; 0x07
  c6:	8e 83       	std	Y+6, r24	; 0x06
  c8:	25 e0       	ldi	r18, 0x05	; 5
  ca:	28 87       	std	Y+8, r18	; 0x08
  cc:	9a 87       	std	Y+10, r25	; 0x0a
  ce:	89 87       	std	Y+9, r24	; 0x09
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	2b 87       	std	Y+11, r18	; 0x0b
  d4:	9d 87       	std	Y+13, r25	; 0x0d
  d6:	8c 87       	std	Y+12, r24	; 0x0c
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	8e 87       	std	Y+14, r24	; 0x0e
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
  e6:	e8 9a       	sbi	0x1d, 0	; 29
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 08 03 	call	0x610	; 0x610 <nRF24L01_begin>
  ee:	ce 01       	movw	r24, r28
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <main>:
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	ad 97       	sbiw	r28, 0x2d	; 45
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	87 b9       	out	0x07, r24	; 7
 10e:	18 b8       	out	0x08, r1	; 8
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	95 e2       	ldi	r25, 0x25	; 37
 114:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_init>
 118:	0e 94 b1 02 	call	0x562	; 0x562 <start_msg>
 11c:	85 e0       	ldi	r24, 0x05	; 5
 11e:	e6 e0       	ldi	r30, 0x06	; 6
 120:	f1 e0       	ldi	r31, 0x01	; 1
 122:	de 01       	movw	r26, r28
 124:	11 96       	adiw	r26, 0x01	; 1
 126:	01 90       	ld	r0, Z+
 128:	0d 92       	st	X+, r0
 12a:	8a 95       	dec	r24
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x30>
 12e:	20 9a       	sbi	0x04, 0	; 4
 130:	28 98       	cbi	0x05, 0	; 5
 132:	8b e0       	ldi	r24, 0x0B	; 11
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	82 e5       	ldi	r24, 0x52	; 82
 13e:	97 e0       	ldi	r25, 0x07	; 7
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x4a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x54>
 14a:	00 00       	nop
 14c:	78 94       	sei
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_rf>
 152:	7c 01       	movw	r14, r24
 154:	0e 94 d6 04 	call	0x9ac	; 0x9ac <show_board_info>
 158:	ae 01       	movw	r20, r28
 15a:	4f 5f       	subi	r20, 0xFF	; 255
 15c:	5f 4f       	sbci	r21, 0xFF	; 255
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	c7 01       	movw	r24, r14
 164:	0e 94 47 02 	call	0x48e	; 0x48e <nRF24L01_listen>
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	ae 01       	movw	r20, r28
 16e:	4a 5f       	subi	r20, 0xFA	; 250
 170:	5f 4f       	sbci	r21, 0xFF	; 255
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	c7 01       	movw	r24, r14
 176:	0e 94 60 01 	call	0x2c0	; 0x2c0 <nRF24L01_read_register>
 17a:	10 e0       	ldi	r17, 0x00	; 0
 17c:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <__data_end>
 180:	88 23       	and	r24, r24
 182:	e1 f3       	breq	.-8      	; 0x17c <main+0x86>
 184:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <__data_end>
 188:	0f c0       	rjmp	.+30     	; 0x1a8 <main+0xb2>
 18a:	1f 5f       	subi	r17, 0xFF	; 255
 18c:	18 b9       	out	0x08, r17	; 8
 18e:	19 3c       	cpi	r17, 0xC9	; 201
 190:	08 f0       	brcs	.+2      	; 0x194 <main+0x9e>
 192:	10 e0       	ldi	r17, 0x00	; 0
 194:	be 01       	movw	r22, r28
 196:	65 5f       	subi	r22, 0xF5	; 245
 198:	7f 4f       	sbci	r23, 0xFF	; 255
 19a:	c7 01       	movw	r24, r14
 19c:	0e 94 a6 01 	call	0x34c	; 0x34c <nRF24L01_read_received_data>
 1a0:	ce 01       	movw	r24, r28
 1a2:	0d 96       	adiw	r24, 0x0d	; 13
 1a4:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 1a8:	c7 01       	movw	r24, r14
 1aa:	0e 94 24 02 	call	0x448	; 0x448 <nRF24L01_data_received>
 1ae:	81 11       	cpse	r24, r1
 1b0:	ec cf       	rjmp	.-40     	; 0x18a <main+0x94>
 1b2:	ae 01       	movw	r20, r28
 1b4:	4f 5f       	subi	r20, 0xFF	; 255
 1b6:	5f 4f       	sbci	r21, 0xFF	; 255
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	c7 01       	movw	r24, r14
 1be:	0e 94 47 02 	call	0x48e	; 0x48e <nRF24L01_listen>
 1c2:	dc cf       	rjmp	.-72     	; 0x17c <main+0x86>

000001c4 <__vector_1>:
inline void set_led_low(void) {
	PORTB &= ~_BV(PB0);
}

// nRF24L01 interrupt
ISR(INT0_vect) {
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
	serial_writeln("RX Interrupt called..");
 1e6:	82 e2       	ldi	r24, 0x22	; 34
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	rf_interrupt = true;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__data_end>
}
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	7f 91       	pop	r23
 202:	6f 91       	pop	r22
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <copy_address>:
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
	serial_writeln("CE HIGH");
}
 216:	fc 01       	movw	r30, r24
 218:	a6 2f       	mov	r26, r22
 21a:	b7 2f       	mov	r27, r23
 21c:	9c 01       	movw	r18, r24
 21e:	2b 5f       	subi	r18, 0xFB	; 251
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	91 91       	ld	r25, Z+
 224:	9d 93       	st	X+, r25
 226:	e2 17       	cp	r30, r18
 228:	f3 07       	cpc	r31, r19
 22a:	d9 f7       	brne	.-10     	; 0x222 <copy_address+0xc>
 22c:	08 95       	ret

0000022e <nRF24L01_init>:
 22e:	80 e1       	ldi	r24, 0x10	; 16
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 84 05 	call	0xb08	; 0xb08 <malloc>
 236:	20 e1       	ldi	r18, 0x10	; 16
 238:	fc 01       	movw	r30, r24
 23a:	11 92       	st	Z+, r1
 23c:	2a 95       	dec	r18
 23e:	e9 f7       	brne	.-6      	; 0x23a <nRF24L01_init+0xc>
 240:	08 95       	ret

00000242 <nRF24L01_send_command>:
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	ec 01       	movw	r28, r24
 248:	da 01       	movw	r26, r20
 24a:	e8 81       	ld	r30, Y
 24c:	f9 81       	ldd	r31, Y+1	; 0x01
 24e:	50 81       	ld	r21, Z
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0a 80       	ldd	r0, Y+2	; 0x02
 256:	02 c0       	rjmp	.+4      	; 0x25c <nRF24L01_send_command+0x1a>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	0a 94       	dec	r0
 25e:	e2 f7       	brpl	.-8      	; 0x258 <nRF24L01_send_command+0x16>
 260:	80 95       	com	r24
 262:	85 23       	and	r24, r21
 264:	80 83       	st	Z, r24
 266:	6e bd       	out	0x2e, r22	; 46
 268:	0d b4       	in	r0, 0x2d	; 45
 26a:	07 fe       	sbrs	r0, 7
 26c:	fd cf       	rjmp	.-6      	; 0x268 <nRF24L01_send_command+0x26>
 26e:	8e b5       	in	r24, 0x2e	; 46
 270:	8f 87       	std	Y+15, r24	; 0x0f
 272:	21 15       	cp	r18, r1
 274:	31 05       	cpc	r19, r1
 276:	79 f0       	breq	.+30     	; 0x296 <nRF24L01_send_command+0x54>
 278:	fd 01       	movw	r30, r26
 27a:	2a 0f       	add	r18, r26
 27c:	3b 1f       	adc	r19, r27
 27e:	df 01       	movw	r26, r30
 280:	90 81       	ld	r25, Z
 282:	9e bd       	out	0x2e, r25	; 46
 284:	0d b4       	in	r0, 0x2d	; 45
 286:	07 fe       	sbrs	r0, 7
 288:	fd cf       	rjmp	.-6      	; 0x284 <nRF24L01_send_command+0x42>
 28a:	9e b5       	in	r25, 0x2e	; 46
 28c:	9c 93       	st	X, r25
 28e:	31 96       	adiw	r30, 0x01	; 1
 290:	e2 17       	cp	r30, r18
 292:	f3 07       	cpc	r31, r19
 294:	a1 f7       	brne	.-24     	; 0x27e <nRF24L01_send_command+0x3c>
 296:	e8 81       	ld	r30, Y
 298:	f9 81       	ldd	r31, Y+1	; 0x01
 29a:	20 81       	ld	r18, Z
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0a 80       	ldd	r0, Y+2	; 0x02
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <nRF24L01_send_command+0x66>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	0a 94       	dec	r0
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <nRF24L01_send_command+0x62>
 2ac:	82 2b       	or	r24, r18
 2ae:	80 83       	st	Z, r24
 2b0:	8f 85       	ldd	r24, Y+15	; 0x0f
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <nRF24L01_write_register>:
 2b8:	60 62       	ori	r22, 0x20	; 32
 2ba:	0e 94 21 01 	call	0x242	; 0x242 <nRF24L01_send_command>
 2be:	08 95       	ret

000002c0 <nRF24L01_read_register>:
 2c0:	0e 94 21 01 	call	0x242	; 0x242 <nRF24L01_send_command>
 2c4:	08 95       	ret

000002c6 <nRF24L01_no_op>:
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	50 e0       	ldi	r21, 0x00	; 0
 2ce:	6f ef       	ldi	r22, 0xFF	; 255
 2d0:	0e 94 21 01 	call	0x242	; 0x242 <nRF24L01_send_command>
 2d4:	08 95       	ret

000002d6 <nRF24L01_update_status>:
 2d6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <nRF24L01_no_op>
 2da:	08 95       	ret

000002dc <nRF24L01_pipe_number_received>:
 2dc:	fc 01       	movw	r30, r24
 2de:	27 85       	ldd	r18, Z+15	; 0x0f
 2e0:	2e 70       	andi	r18, 0x0E	; 14
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	35 95       	asr	r19
 2e6:	27 95       	ror	r18
 2e8:	26 30       	cpi	r18, 0x06	; 6
 2ea:	31 05       	cpc	r19, r1
 2ec:	1c f4       	brge	.+6      	; 0x2f4 <nRF24L01_pipe_number_received+0x18>
 2ee:	82 2f       	mov	r24, r18
 2f0:	93 2f       	mov	r25, r19
 2f2:	08 95       	ret
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	9f ef       	ldi	r25, 0xFF	; 255
 2f8:	08 95       	ret

000002fa <nRF24L01_clear_interrupts>:
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	1f 92       	push	r1
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	20 e7       	ldi	r18, 0x70	; 112
 306:	29 83       	std	Y+1, r18	; 0x01
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	ae 01       	movw	r20, r28
 30e:	4f 5f       	subi	r20, 0xFF	; 255
 310:	5f 4f       	sbci	r21, 0xFF	; 255
 312:	67 e0       	ldi	r22, 0x07	; 7
 314:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nRF24L01_write_register>
 318:	0f 90       	pop	r0
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <nRF24L01_clear_receive_interrupt>:
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	1f 92       	push	r1
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	fc 01       	movw	r30, r24
 32c:	97 85       	ldd	r25, Z+15	; 0x0f
 32e:	90 64       	ori	r25, 0x40	; 64
 330:	99 83       	std	Y+1, r25	; 0x01
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	ae 01       	movw	r20, r28
 338:	4f 5f       	subi	r20, 0xFF	; 255
 33a:	5f 4f       	sbci	r21, 0xFF	; 255
 33c:	67 e0       	ldi	r22, 0x07	; 7
 33e:	cf 01       	movw	r24, r30
 340:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nRF24L01_write_register>
 344:	0f 90       	pop	r0
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <nRF24L01_read_received_data>:
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	8c 01       	movw	r16, r24
 356:	eb 01       	movw	r28, r22
 358:	0e 94 6e 01 	call	0x2dc	; 0x2dc <nRF24L01_pipe_number_received>
 35c:	99 83       	std	Y+1, r25	; 0x01
 35e:	88 83       	st	Y, r24
 360:	c8 01       	movw	r24, r16
 362:	0e 94 90 01 	call	0x320	; 0x320 <nRF24L01_clear_receive_interrupt>
 366:	88 81       	ld	r24, Y
 368:	99 81       	ldd	r25, Y+1	; 0x01
 36a:	99 23       	and	r25, r25
 36c:	1c f4       	brge	.+6      	; 0x374 <nRF24L01_read_received_data+0x28>
 36e:	1a a2       	std	Y+34, r1	; 0x22
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	17 c0       	rjmp	.+46     	; 0x3a2 <nRF24L01_read_received_data+0x56>
 374:	21 e0       	ldi	r18, 0x01	; 1
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	ae 01       	movw	r20, r28
 37a:	4e 5d       	subi	r20, 0xDE	; 222
 37c:	5f 4f       	sbci	r21, 0xFF	; 255
 37e:	60 e6       	ldi	r22, 0x60	; 96
 380:	c8 01       	movw	r24, r16
 382:	0e 94 60 01 	call	0x2c0	; 0x2c0 <nRF24L01_read_register>
 386:	2a a1       	ldd	r18, Y+34	; 0x22
 388:	22 23       	and	r18, r18
 38a:	51 f0       	breq	.+20     	; 0x3a0 <nRF24L01_read_received_data+0x54>
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	ae 01       	movw	r20, r28
 390:	4e 5f       	subi	r20, 0xFE	; 254
 392:	5f 4f       	sbci	r21, 0xFF	; 255
 394:	61 e6       	ldi	r22, 0x61	; 97
 396:	c8 01       	movw	r24, r16
 398:	0e 94 21 01 	call	0x242	; 0x242 <nRF24L01_send_command>
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	01 c0       	rjmp	.+2      	; 0x3a2 <nRF24L01_read_received_data+0x56>
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	08 95       	ret

000003ac <uart_init>:
 3ac:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 3b0:	83 e3       	ldi	r24, 0x33	; 51
 3b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 3b6:	86 e0       	ldi	r24, 0x06	; 6
 3b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 3bc:	88 e0       	ldi	r24, 0x08	; 8
 3be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 3c2:	08 95       	ret

000003c4 <serial_write>:
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	fc 01       	movw	r30, r24
 3ca:	01 90       	ld	r0, Z+
 3cc:	00 20       	and	r0, r0
 3ce:	e9 f7       	brne	.-6      	; 0x3ca <serial_write+0x6>
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	e8 1b       	sub	r30, r24
 3d4:	f9 0b       	sbc	r31, r25
 3d6:	1e 16       	cp	r1, r30
 3d8:	1f 06       	cpc	r1, r31
 3da:	84 f4       	brge	.+32     	; 0x3fc <serial_write+0x38>
 3dc:	dc 01       	movw	r26, r24
 3de:	9c 01       	movw	r18, r24
 3e0:	2e 0f       	add	r18, r30
 3e2:	3f 1f       	adc	r19, r31
 3e4:	c6 ec       	ldi	r28, 0xC6	; 198
 3e6:	d0 e0       	ldi	r29, 0x00	; 0
 3e8:	e0 ec       	ldi	r30, 0xC0	; 192
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	9d 91       	ld	r25, X+
 3ee:	98 83       	st	Y, r25
 3f0:	90 81       	ld	r25, Z
 3f2:	95 ff       	sbrs	r25, 5
 3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <serial_write+0x2c>
 3f6:	a2 17       	cp	r26, r18
 3f8:	b3 07       	cpc	r27, r19
 3fa:	c1 f7       	brne	.-16     	; 0x3ec <serial_write+0x28>
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <serial_writeln>:
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	fc 01       	movw	r30, r24
 408:	01 90       	ld	r0, Z+
 40a:	00 20       	and	r0, r0
 40c:	e9 f7       	brne	.-6      	; 0x408 <serial_writeln+0x6>
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	e8 1b       	sub	r30, r24
 412:	f9 0b       	sbc	r31, r25
 414:	1e 16       	cp	r1, r30
 416:	1f 06       	cpc	r1, r31
 418:	84 f4       	brge	.+32     	; 0x43a <serial_writeln+0x38>
 41a:	dc 01       	movw	r26, r24
 41c:	9c 01       	movw	r18, r24
 41e:	2e 0f       	add	r18, r30
 420:	3f 1f       	adc	r19, r31
 422:	c6 ec       	ldi	r28, 0xC6	; 198
 424:	d0 e0       	ldi	r29, 0x00	; 0
 426:	e0 ec       	ldi	r30, 0xC0	; 192
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	9d 91       	ld	r25, X+
 42c:	98 83       	st	Y, r25
 42e:	90 81       	ld	r25, Z
 430:	95 ff       	sbrs	r25, 5
 432:	fd cf       	rjmp	.-6      	; 0x42e <serial_writeln+0x2c>
 434:	a2 17       	cp	r26, r18
 436:	b3 07       	cpc	r27, r19
 438:	c1 f7       	brne	.-16     	; 0x42a <serial_writeln+0x28>
 43a:	8a ef       	ldi	r24, 0xFA	; 250
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <serial_write>
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <nRF24L01_data_received>:
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	ec 01       	movw	r28, r24
 44e:	eb 81       	ldd	r30, Y+3	; 0x03
 450:	fc 81       	ldd	r31, Y+4	; 0x04
 452:	20 81       	ld	r18, Z
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0d 80       	ldd	r0, Y+5	; 0x05
 45a:	02 c0       	rjmp	.+4      	; 0x460 <nRF24L01_data_received+0x18>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <nRF24L01_data_received+0x14>
 464:	80 95       	com	r24
 466:	82 23       	and	r24, r18
 468:	80 83       	st	Z, r24
 46a:	88 e3       	ldi	r24, 0x38	; 56
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 472:	ce 01       	movw	r24, r28
 474:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <nRF24L01_update_status>
 478:	ce 01       	movw	r24, r28
 47a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <nRF24L01_pipe_number_received>
 47e:	89 2f       	mov	r24, r25
 480:	80 95       	com	r24
 482:	88 1f       	adc	r24, r24
 484:	88 27       	eor	r24, r24
 486:	88 1f       	adc	r24, r24
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <nRF24L01_listen>:
 48e:	df 92       	push	r13
 490:	ef 92       	push	r14
 492:	ff 92       	push	r15
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	00 d0       	rcall	.+0      	; 0x49e <nRF24L01_listen+0x10>
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <nRF24L01_listen+0x12>
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <nRF24L01_listen+0x14>
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	7c 01       	movw	r14, r24
 4a8:	d6 2e       	mov	r13, r22
 4aa:	ca 01       	movw	r24, r20
 4ac:	be 01       	movw	r22, r28
 4ae:	6f 5f       	subi	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	0e 94 0b 01 	call	0x216	; 0x216 <copy_address>
 4b6:	6a e0       	ldi	r22, 0x0A	; 10
 4b8:	6d 0d       	add	r22, r13
 4ba:	25 e0       	ldi	r18, 0x05	; 5
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	ae 01       	movw	r20, r28
 4c0:	4f 5f       	subi	r20, 0xFF	; 255
 4c2:	5f 4f       	sbci	r21, 0xFF	; 255
 4c4:	c7 01       	movw	r24, r14
 4c6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nRF24L01_write_register>
 4ca:	21 e0       	ldi	r18, 0x01	; 1
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	ae 01       	movw	r20, r28
 4d0:	4a 5f       	subi	r20, 0xFA	; 250
 4d2:	5f 4f       	sbci	r21, 0xFF	; 255
 4d4:	62 e0       	ldi	r22, 0x02	; 2
 4d6:	c7 01       	movw	r24, r14
 4d8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <nRF24L01_read_register>
 4dc:	01 e0       	ldi	r16, 0x01	; 1
 4de:	10 e0       	ldi	r17, 0x00	; 0
 4e0:	c8 01       	movw	r24, r16
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <nRF24L01_listen+0x5a>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	da 94       	dec	r13
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <nRF24L01_listen+0x56>
 4ec:	9e 81       	ldd	r25, Y+6	; 0x06
 4ee:	89 2b       	or	r24, r25
 4f0:	8e 83       	std	Y+6, r24	; 0x06
 4f2:	21 e0       	ldi	r18, 0x01	; 1
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	ae 01       	movw	r20, r28
 4f8:	4a 5f       	subi	r20, 0xFA	; 250
 4fa:	5f 4f       	sbci	r21, 0xFF	; 255
 4fc:	62 e0       	ldi	r22, 0x02	; 2
 4fe:	c7 01       	movw	r24, r14
 500:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nRF24L01_write_register>
 504:	8f e3       	ldi	r24, 0x3F	; 63
 506:	9c e9       	ldi	r25, 0x9C	; 156
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <nRF24L01_listen+0x7a>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <nRF24L01_listen+0x80>
 50e:	00 00       	nop
 510:	d7 01       	movw	r26, r14
 512:	13 96       	adiw	r26, 0x03	; 3
 514:	ed 91       	ld	r30, X+
 516:	fc 91       	ld	r31, X
 518:	14 97       	sbiw	r26, 0x04	; 4
 51a:	80 81       	ld	r24, Z
 51c:	15 96       	adiw	r26, 0x05	; 5
 51e:	0c 90       	ld	r0, X
 520:	02 c0       	rjmp	.+4      	; 0x526 <nRF24L01_listen+0x98>
 522:	00 0f       	add	r16, r16
 524:	11 1f       	adc	r17, r17
 526:	0a 94       	dec	r0
 528:	e2 f7       	brpl	.-8      	; 0x522 <nRF24L01_listen+0x94>
 52a:	08 2b       	or	r16, r24
 52c:	00 83       	st	Z, r16
 52e:	8f e3       	ldi	r24, 0x3F	; 63
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 536:	26 96       	adiw	r28, 0x06	; 6
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	08 95       	ret

00000552 <serial_putch>:
	serial_write("\n\r");
	
}

void serial_putch(unsigned char value){
	UDR0 = value;
 552:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer*/
 556:	e0 ec       	ldi	r30, 0xC0	; 192
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	85 ff       	sbrs	r24, 5
 55e:	fd cf       	rjmp	.-6      	; 0x55a <serial_putch+0x8>
	
}
 560:	08 95       	ret

00000562 <start_msg>:
}




void start_msg(){
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
	
	serial_writeln("Welcome to atmega328P");
 566:	87 e4       	ldi	r24, 0x47	; 71
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	serial_write("Running onboard-diagnostics");
 56e:	8d e5       	ldi	r24, 0x5D	; 93
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <serial_write>
 576:	ca e0       	ldi	r28, 0x0A	; 10
 578:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (int i = 0; i<10; i++){
		serial_putch('.');
 57a:	8e e2       	ldi	r24, 0x2E	; 46
 57c:	0e 94 a9 02 	call	0x552	; 0x552 <serial_putch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 580:	2f ef       	ldi	r18, 0xFF	; 255
 582:	83 ec       	ldi	r24, 0xC3	; 195
 584:	99 e0       	ldi	r25, 0x09	; 9
 586:	21 50       	subi	r18, 0x01	; 1
 588:	80 40       	sbci	r24, 0x00	; 0
 58a:	90 40       	sbci	r25, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <start_msg+0x24>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <start_msg+0x2e>
 590:	00 00       	nop
 592:	21 97       	sbiw	r28, 0x01	; 1
void start_msg(){
	
	serial_writeln("Welcome to atmega328P");
	serial_write("Running onboard-diagnostics");
	
	for (int i = 0; i<10; i++){
 594:	91 f7       	brne	.-28     	; 0x57a <start_msg+0x18>
		serial_putch('.');
		_delay_ms(400);
	}
	serial_writeln("");
 596:	8c ef       	ldi	r24, 0xFC	; 252
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	
}
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <binary>:
	UDR0 = value;
	while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer*/
	
}

void binary(uint8_t value){
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	29 97       	sbiw	r28, 0x09	; 9
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	f8 94       	cli
 5b2:	de bf       	out	0x3e, r29	; 62
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	cd bf       	out	0x3d, r28	; 61
 5b8:	fe 01       	movw	r30, r28
 5ba:	31 96       	adiw	r30, 0x01	; 1
 5bc:	9e 01       	movw	r18, r28
 5be:	27 5f       	subi	r18, 0xF7	; 247
 5c0:	3f 4f       	sbci	r19, 0xFF	; 255
		
		if (value%2){
			bin[i] = '1';
		}
		else{
			bin[i] = '0';
 5c2:	40 e3       	ldi	r20, 0x30	; 48
	unsigned char bin[9] ;
	uint8_t i = 0;
	for (i = 0; i < 8 ; i++){
		
		if (value%2){
			bin[i] = '1';
 5c4:	91 e3       	ldi	r25, 0x31	; 49
	
	unsigned char bin[9] ;
	uint8_t i = 0;
	for (i = 0; i < 8 ; i++){
		
		if (value%2){
 5c6:	80 ff       	sbrs	r24, 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <binary+0x2a>
			bin[i] = '1';
 5ca:	90 83       	st	Z, r25
 5cc:	01 c0       	rjmp	.+2      	; 0x5d0 <binary+0x2c>
		}
		else{
			bin[i] = '0';
 5ce:	40 83       	st	Z, r20
			
		}
		value = value / 2;
 5d0:	86 95       	lsr	r24
 5d2:	31 96       	adiw	r30, 0x01	; 1

void binary(uint8_t value){
	
	unsigned char bin[9] ;
	uint8_t i = 0;
	for (i = 0; i < 8 ; i++){
 5d4:	e2 17       	cp	r30, r18
 5d6:	f3 07       	cpc	r31, r19
 5d8:	b1 f7       	brne	.-20     	; 0x5c6 <binary+0x22>
			bin[i] = '0';
			
		}
		value = value / 2;
	}
	strrev(bin);
 5da:	ce 01       	movw	r24, r28
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	0e 94 a5 06 	call	0xd4a	; 0xd4a <strrev>
	serial_writeln(bin);
 5e2:	ce 01       	movw	r24, r28
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	
}
 5ea:	29 96       	adiw	r28, 0x09	; 9
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	f8 94       	cli
 5f0:	de bf       	out	0x3e, r29	; 62
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	cd bf       	out	0x3d, r28	; 61
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	08 95       	ret

000005fc <show_register_val>:

void show_register_val(uint8_t reg,char name[]){
 5fc:	cf 93       	push	r28
 5fe:	c8 2f       	mov	r28, r24
 600:	cb 01       	movw	r24, r22
	serial_write(name);
 602:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <serial_write>
	binary(reg);
 606:	8c 2f       	mov	r24, r28
 608:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <binary>
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
 610:	ef 92       	push	r14
 612:	ff 92       	push	r15
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	1f 92       	push	r1
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	8c 01       	movw	r16, r24
	
	serial_writeln("Setting NRF24L01+ begin function...");
 624:	89 e7       	ldi	r24, 0x79	; 121
 626:	91 e0       	ldi	r25, 0x01	; 1
 628:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 62c:	d8 01       	movw	r26, r16
 62e:	ed 91       	ld	r30, X+
 630:	fc 91       	ld	r31, X
 632:	11 97       	sbiw	r26, 0x01	; 1
 634:	22 91       	ld	r18, -Z
 636:	ee 24       	eor	r14, r14
 638:	e3 94       	inc	r14
 63a:	f1 2c       	mov	r15, r1
 63c:	c7 01       	movw	r24, r14
 63e:	12 96       	adiw	r26, 0x02	; 2
 640:	0c 90       	ld	r0, X
 642:	12 97       	sbiw	r26, 0x02	; 2
 644:	02 c0       	rjmp	.+4      	; 0x64a <nRF24L01_begin+0x3a>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	0a 94       	dec	r0
 64c:	e2 f7       	brpl	.-8      	; 0x646 <nRF24L01_begin+0x36>
 64e:	82 2b       	or	r24, r18
 650:	80 83       	st	Z, r24
 652:	13 96       	adiw	r26, 0x03	; 3
 654:	ed 91       	ld	r30, X+
 656:	fc 91       	ld	r31, X
 658:	14 97       	sbiw	r26, 0x04	; 4
 65a:	22 91       	ld	r18, -Z
 65c:	c7 01       	movw	r24, r14
 65e:	15 96       	adiw	r26, 0x05	; 5
 660:	0c 90       	ld	r0, X
 662:	15 97       	sbiw	r26, 0x05	; 5
 664:	02 c0       	rjmp	.+4      	; 0x66a <nRF24L01_begin+0x5a>
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	0a 94       	dec	r0
 66c:	e2 f7       	brpl	.-8      	; 0x666 <nRF24L01_begin+0x56>
 66e:	82 2b       	or	r24, r18
 670:	80 83       	st	Z, r24
 672:	ed 91       	ld	r30, X+
 674:	fc 91       	ld	r31, X
 676:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
 678:	20 81       	ld	r18, Z
 67a:	c7 01       	movw	r24, r14
 67c:	12 96       	adiw	r26, 0x02	; 2
 67e:	0c 90       	ld	r0, X
 680:	12 97       	sbiw	r26, 0x02	; 2
 682:	02 c0       	rjmp	.+4      	; 0x688 <nRF24L01_begin+0x78>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	0a 94       	dec	r0
 68a:	e2 f7       	brpl	.-8      	; 0x684 <nRF24L01_begin+0x74>
 68c:	82 2b       	or	r24, r18
 68e:	80 83       	st	Z, r24
 690:	13 96       	adiw	r26, 0x03	; 3
 692:	ed 91       	ld	r30, X+
 694:	fc 91       	ld	r31, X
 696:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
 698:	90 81       	ld	r25, Z
 69a:	97 01       	movw	r18, r14
 69c:	15 96       	adiw	r26, 0x05	; 5
 69e:	0c 90       	ld	r0, X
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <nRF24L01_begin+0x96>
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	0a 94       	dec	r0
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <nRF24L01_begin+0x92>
 6aa:	82 2f       	mov	r24, r18
 6ac:	80 95       	com	r24
 6ae:	89 23       	and	r24, r25
 6b0:	80 83       	st	Z, r24
    set_as_output(rf->ss);
    set_as_output(rf->ce);

    set_high(rf->ss);
    set_low(rf->ce);
	serial_writeln("CE LOW");
 6b2:	88 e3       	ldi	r24, 0x38	; 56
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	
	serial_writeln("Initiating SPI comm...");
 6ba:	8d e9       	ldi	r24, 0x9D	; 157
 6bc:	91 e0       	ldi	r25, 0x01	; 1
 6be:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
    *pin.port &= ~_BV(pin.pin);
}

static void spi_init(nRF24L01 *rf) {
    // set as master
    SPCR |= _BV(MSTR);
 6c2:	8c b5       	in	r24, 0x2c	; 44
 6c4:	80 61       	ori	r24, 0x10	; 16
 6c6:	8c bd       	out	0x2c, r24	; 44
    // enable SPI
    SPCR |= _BV(SPE);
 6c8:	8c b5       	in	r24, 0x2c	; 44
 6ca:	80 64       	ori	r24, 0x40	; 64
 6cc:	8c bd       	out	0x2c, r24	; 44
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 6ce:	d8 01       	movw	r26, r16
 6d0:	16 96       	adiw	r26, 0x06	; 6
 6d2:	ed 91       	ld	r30, X+
 6d4:	fc 91       	ld	r31, X
 6d6:	17 97       	sbiw	r26, 0x07	; 7
 6d8:	22 91       	ld	r18, -Z
 6da:	c7 01       	movw	r24, r14
 6dc:	18 96       	adiw	r26, 0x08	; 8
 6de:	0c 90       	ld	r0, X
 6e0:	18 97       	sbiw	r26, 0x08	; 8
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <nRF24L01_begin+0xd8>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	0a 94       	dec	r0
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <nRF24L01_begin+0xd4>
 6ec:	82 2b       	or	r24, r18
 6ee:	80 83       	st	Z, r24
 6f0:	19 96       	adiw	r26, 0x09	; 9
 6f2:	ed 91       	ld	r30, X+
 6f4:	fc 91       	ld	r31, X
 6f6:	1a 97       	sbiw	r26, 0x0a	; 10
 6f8:	22 91       	ld	r18, -Z
 6fa:	c7 01       	movw	r24, r14
 6fc:	1b 96       	adiw	r26, 0x0b	; 11
 6fe:	0c 90       	ld	r0, X
 700:	1b 97       	sbiw	r26, 0x0b	; 11
 702:	02 c0       	rjmp	.+4      	; 0x708 <nRF24L01_begin+0xf8>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	0a 94       	dec	r0
 70a:	e2 f7       	brpl	.-8      	; 0x704 <nRF24L01_begin+0xf4>
 70c:	82 2b       	or	r24, r18
 70e:	80 83       	st	Z, r24
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
 710:	1c 96       	adiw	r26, 0x0c	; 12
 712:	ed 91       	ld	r30, X+
 714:	fc 91       	ld	r31, X
 716:	1d 97       	sbiw	r26, 0x0d	; 13
 718:	82 91       	ld	r24, -Z
 71a:	1e 96       	adiw	r26, 0x0e	; 14
 71c:	0c 90       	ld	r0, X
 71e:	02 c0       	rjmp	.+4      	; 0x724 <nRF24L01_begin+0x114>
 720:	ee 0c       	add	r14, r14
 722:	ff 1c       	adc	r15, r15
 724:	0a 94       	dec	r0
 726:	e2 f7       	brpl	.-8      	; 0x720 <nRF24L01_begin+0x110>
 728:	e0 94       	com	r14
 72a:	e8 22       	and	r14, r24
 72c:	e0 82       	st	Z, r14
    // MISO pin automatically overrides to input
    set_as_output(rf->sck);
    set_as_output(rf->mosi);
    set_as_input(rf->miso);
    // SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
    SPCR &= ~_BV(CPOL);
 72e:	8c b5       	in	r24, 0x2c	; 44
 730:	87 7f       	andi	r24, 0xF7	; 247
 732:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(CPHA);
 734:	8c b5       	in	r24, 0x2c	; 44
 736:	8b 7f       	andi	r24, 0xFB	; 251
 738:	8c bd       	out	0x2c, r24	; 44
    // Clock 2X speed
    SPCR &= ~_BV(SPR0);
 73a:	8c b5       	in	r24, 0x2c	; 44
 73c:	8e 7f       	andi	r24, 0xFE	; 254
 73e:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(SPR1);
 740:	8c b5       	in	r24, 0x2c	; 44
 742:	8d 7f       	andi	r24, 0xFD	; 253
 744:	8c bd       	out	0x2c, r24	; 44
    SPSR |= _BV(SPI2X);
 746:	8d b5       	in	r24, 0x2d	; 45
 748:	81 60       	ori	r24, 0x01	; 1
 74a:	8d bd       	out	0x2d, r24	; 45
    // most significant first (MSB)
    SPCR &= ~_BV(DORD);
 74c:	8c b5       	in	r24, 0x2c	; 44
 74e:	8f 7d       	andi	r24, 0xDF	; 223
 750:	8c bd       	out	0x2c, r24	; 44
	serial_writeln("CE LOW");
	
	serial_writeln("Initiating SPI comm...");
    spi_init(rf);

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
 752:	20 e0       	ldi	r18, 0x00	; 0
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	62 ee       	ldi	r22, 0xE2	; 226
 75c:	c8 01       	movw	r24, r16
 75e:	0e 94 21 01 	call	0x242	; 0x242 <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
 762:	20 e0       	ldi	r18, 0x00	; 0
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	40 e0       	ldi	r20, 0x00	; 0
 768:	50 e0       	ldi	r21, 0x00	; 0
 76a:	61 ee       	ldi	r22, 0xE1	; 225
 76c:	c8 01       	movw	r24, r16
 76e:	0e 94 21 01 	call	0x242	; 0x242 <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
 772:	c8 01       	movw	r24, r16
 774:	0e 94 7d 01 	call	0x2fa	; 0x2fa <nRF24L01_clear_interrupts>

    uint8_t data;
    data = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
 778:	8f e0       	ldi	r24, 0x0F	; 15
 77a:	89 83       	std	Y+1, r24	; 0x01
	
	serial_writeln("Writing CONFIG register in RX..");
 77c:	84 eb       	ldi	r24, 0xB4	; 180
 77e:	91 e0       	ldi	r25, 0x01	; 1
 780:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 784:	bf ef       	ldi	r27, 0xFF	; 255
 786:	21 ee       	ldi	r18, 0xE1	; 225
 788:	84 e0       	ldi	r24, 0x04	; 4
 78a:	b1 50       	subi	r27, 0x01	; 1
 78c:	20 40       	sbci	r18, 0x00	; 0
 78e:	80 40       	sbci	r24, 0x00	; 0
 790:	e1 f7       	brne	.-8      	; 0x78a <nRF24L01_begin+0x17a>
 792:	00 c0       	rjmp	.+0      	; 0x794 <nRF24L01_begin+0x184>
 794:	00 00       	nop
	_delay_ms(200);
	
    nRF24L01_write_register(rf, CONFIG, &data, 1);
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	ae 01       	movw	r20, r28
 79c:	4f 5f       	subi	r20, 0xFF	; 255
 79e:	5f 4f       	sbci	r21, 0xFF	; 255
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	c8 01       	movw	r24, r16
 7a4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nRF24L01_write_register>
	
	
	
	status = nRF24L01_read_register(rf, CONFIG, &temp , 1);
 7a8:	21 e0       	ldi	r18, 0x01	; 1
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	47 e0       	ldi	r20, 0x07	; 7
 7ae:	54 e0       	ldi	r21, 0x04	; 4
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	c8 01       	movw	r24, r16
 7b4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <nRF24L01_read_register>
 7b8:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <status>
	show_register_val(temp,"CONFIG:  ");
 7bc:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <temp>
 7c0:	64 ed       	ldi	r22, 0xD4	; 212
 7c2:	71 e0       	ldi	r23, 0x01	; 1
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	show_register_val(status,"STATUS:  ");
 7ca:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <status>
 7ce:	6e ed       	ldi	r22, 0xDE	; 222
 7d0:	71 e0       	ldi	r23, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	serial_writeln("------------------\n\r");
 7d8:	88 ee       	ldi	r24, 0xE8	; 232
 7da:	91 e0       	ldi	r25, 0x01	; 1
 7dc:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 7e0:	9f ef       	ldi	r25, 0xFF	; 255
 7e2:	a4 e3       	ldi	r26, 0x34	; 52
 7e4:	bc e0       	ldi	r27, 0x0C	; 12
 7e6:	91 50       	subi	r25, 0x01	; 1
 7e8:	a0 40       	sbci	r26, 0x00	; 0
 7ea:	b0 40       	sbci	r27, 0x00	; 0
 7ec:	e1 f7       	brne	.-8      	; 0x7e6 <nRF24L01_begin+0x1d6>
 7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <nRF24L01_begin+0x1e0>
 7f0:	00 00       	nop
	_delay_ms(500);
	
	
	serial_writeln("Going ahead....");
 7f2:	8d ef       	ldi	r24, 0xFD	; 253
 7f4:	91 e0       	ldi	r25, 0x01	; 1
 7f6:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	
    // enable Auto Acknowlegde on all pipes
    data = _BV(ENAA_P0) | _BV(ENAA_P1) | _BV(ENAA_P2)
 7fa:	0f 2e       	mov	r0, r31
 7fc:	ff e3       	ldi	r31, 0x3F	; 63
 7fe:	ff 2e       	mov	r15, r31
 800:	f0 2d       	mov	r31, r0
 802:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(ENAA_P3) | _BV(ENAA_P4) | _BV(ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
 804:	21 e0       	ldi	r18, 0x01	; 1
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	ae 01       	movw	r20, r28
 80a:	4f 5f       	subi	r20, 0xFF	; 255
 80c:	5f 4f       	sbci	r21, 0xFF	; 255
 80e:	61 e0       	ldi	r22, 0x01	; 1
 810:	c8 01       	movw	r24, r16
 812:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nRF24L01_write_register>
	
	serial_writeln("Enabling auto-acknowledgment...");
 816:	8d e0       	ldi	r24, 0x0D	; 13
 818:	92 e0       	ldi	r25, 0x02	; 2
 81a:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	status = nRF24L01_read_register(rf, EN_AA, &temp , 1);
 81e:	21 e0       	ldi	r18, 0x01	; 1
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	47 e0       	ldi	r20, 0x07	; 7
 824:	54 e0       	ldi	r21, 0x04	; 4
 826:	61 e0       	ldi	r22, 0x01	; 1
 828:	c8 01       	movw	r24, r16
 82a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <nRF24L01_read_register>
 82e:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <status>
	show_register_val(temp,"ENAA:  ");
 832:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <temp>
 836:	6d e2       	ldi	r22, 0x2D	; 45
 838:	72 e0       	ldi	r23, 0x02	; 2
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	show_register_val(status,"STATUS:  ");
 840:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <status>
 844:	6e ed       	ldi	r22, 0xDE	; 222
 846:	71 e0       	ldi	r23, 0x01	; 1
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	serial_writeln("------------------\n\r");
 84e:	88 ee       	ldi	r24, 0xE8	; 232
 850:	91 e0       	ldi	r25, 0x01	; 1
 852:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 856:	2f ef       	ldi	r18, 0xFF	; 255
 858:	84 e3       	ldi	r24, 0x34	; 52
 85a:	9c e0       	ldi	r25, 0x0C	; 12
 85c:	21 50       	subi	r18, 0x01	; 1
 85e:	80 40       	sbci	r24, 0x00	; 0
 860:	90 40       	sbci	r25, 0x00	; 0
 862:	e1 f7       	brne	.-8      	; 0x85c <nRF24L01_begin+0x24c>
 864:	00 c0       	rjmp	.+0      	; 0x866 <nRF24L01_begin+0x256>
 866:	00 00       	nop
	_delay_ms(500);
	
	
	
    // enable Dynamic Payload on al pipes
    data = _BV(DPL_P0) | _BV(DPL_P1) | _BV(DPL_P2)
 868:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(DPL_P3) | _BV(DPL_P4) | _BV(DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
 86a:	21 e0       	ldi	r18, 0x01	; 1
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	ae 01       	movw	r20, r28
 870:	4f 5f       	subi	r20, 0xFF	; 255
 872:	5f 4f       	sbci	r21, 0xFF	; 255
 874:	6c e1       	ldi	r22, 0x1C	; 28
 876:	c8 01       	movw	r24, r16
 878:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nRF24L01_write_register>
	
	serial_writeln("Enabling dynamic-payload length...");
 87c:	85 e3       	ldi	r24, 0x35	; 53
 87e:	92 e0       	ldi	r25, 0x02	; 2
 880:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	status = nRF24L01_read_register(rf, DYNPD, &temp , 1);
 884:	21 e0       	ldi	r18, 0x01	; 1
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	47 e0       	ldi	r20, 0x07	; 7
 88a:	54 e0       	ldi	r21, 0x04	; 4
 88c:	6c e1       	ldi	r22, 0x1C	; 28
 88e:	c8 01       	movw	r24, r16
 890:	0e 94 60 01 	call	0x2c0	; 0x2c0 <nRF24L01_read_register>
 894:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <status>
	show_register_val(temp,"DYNPD:  ");
 898:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <temp>
 89c:	68 e5       	ldi	r22, 0x58	; 88
 89e:	72 e0       	ldi	r23, 0x02	; 2
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	show_register_val(status,"STATUS:  ");
 8a6:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <status>
 8aa:	6e ed       	ldi	r22, 0xDE	; 222
 8ac:	71 e0       	ldi	r23, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	serial_writeln("------------------\n\r");
 8b4:	88 ee       	ldi	r24, 0xE8	; 232
 8b6:	91 e0       	ldi	r25, 0x01	; 1
 8b8:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 8bc:	af ef       	ldi	r26, 0xFF	; 255
 8be:	b4 e3       	ldi	r27, 0x34	; 52
 8c0:	2c e0       	ldi	r18, 0x0C	; 12
 8c2:	a1 50       	subi	r26, 0x01	; 1
 8c4:	b0 40       	sbci	r27, 0x00	; 0
 8c6:	20 40       	sbci	r18, 0x00	; 0
 8c8:	e1 f7       	brne	.-8      	; 0x8c2 <nRF24L01_begin+0x2b2>
 8ca:	00 c0       	rjmp	.+0      	; 0x8cc <nRF24L01_begin+0x2bc>
 8cc:	00 00       	nop
	
	
	

    // enable Dynamic Payload (global)
    data = _BV(EN_DPL);
 8ce:	84 e0       	ldi	r24, 0x04	; 4
 8d0:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
 8d2:	21 e0       	ldi	r18, 0x01	; 1
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	ae 01       	movw	r20, r28
 8d8:	4f 5f       	subi	r20, 0xFF	; 255
 8da:	5f 4f       	sbci	r21, 0xFF	; 255
 8dc:	6d e1       	ldi	r22, 0x1D	; 29
 8de:	c8 01       	movw	r24, r16
 8e0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nRF24L01_write_register>
	
	serial_writeln("Enabling GLOBAL-DYN length...");
 8e4:	81 e6       	ldi	r24, 0x61	; 97
 8e6:	92 e0       	ldi	r25, 0x02	; 2
 8e8:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	status = nRF24L01_read_register(rf, FEATURE, &temp , 1);
 8ec:	21 e0       	ldi	r18, 0x01	; 1
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	47 e0       	ldi	r20, 0x07	; 7
 8f2:	54 e0       	ldi	r21, 0x04	; 4
 8f4:	6d e1       	ldi	r22, 0x1D	; 29
 8f6:	c8 01       	movw	r24, r16
 8f8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <nRF24L01_read_register>
 8fc:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <status>
	show_register_val(temp,"FEATURE:  ");
 900:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <temp>
 904:	6f e7       	ldi	r22, 0x7F	; 127
 906:	72 e0       	ldi	r23, 0x02	; 2
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	show_register_val(status,"STATUS:  ");
 90e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <status>
 912:	6e ed       	ldi	r22, 0xDE	; 222
 914:	71 e0       	ldi	r23, 0x01	; 1
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	serial_writeln("------------------\n\r");
 91c:	88 ee       	ldi	r24, 0xE8	; 232
 91e:	91 e0       	ldi	r25, 0x01	; 1
 920:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 924:	8f ef       	ldi	r24, 0xFF	; 255
 926:	94 e3       	ldi	r25, 0x34	; 52
 928:	ac e0       	ldi	r26, 0x0C	; 12
 92a:	81 50       	subi	r24, 0x01	; 1
 92c:	90 40       	sbci	r25, 0x00	; 0
 92e:	a0 40       	sbci	r26, 0x00	; 0
 930:	e1 f7       	brne	.-8      	; 0x92a <__stack+0x2b>
 932:	00 c0       	rjmp	.+0      	; 0x934 <__stack+0x35>
 934:	00 00       	nop
	_delay_ms(500);

    // disable all rx addresses
    data = 0;
 936:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
 938:	21 e0       	ldi	r18, 0x01	; 1
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	ae 01       	movw	r20, r28
 93e:	4f 5f       	subi	r20, 0xFF	; 255
 940:	5f 4f       	sbci	r21, 0xFF	; 255
 942:	62 e0       	ldi	r22, 0x02	; 2
 944:	c8 01       	movw	r24, r16
 946:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nRF24L01_write_register>
	
	serial_writeln("Disabling all RX_ADDRESS...");
 94a:	8a e8       	ldi	r24, 0x8A	; 138
 94c:	92 e0       	ldi	r25, 0x02	; 2
 94e:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	status = nRF24L01_read_register(rf, EN_RXADDR, &temp , 1);
 952:	21 e0       	ldi	r18, 0x01	; 1
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	47 e0       	ldi	r20, 0x07	; 7
 958:	54 e0       	ldi	r21, 0x04	; 4
 95a:	62 e0       	ldi	r22, 0x02	; 2
 95c:	c8 01       	movw	r24, r16
 95e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <nRF24L01_read_register>
 962:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <status>
	show_register_val(temp,"FEATURE:  ");
 966:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <temp>
 96a:	6f e7       	ldi	r22, 0x7F	; 127
 96c:	72 e0       	ldi	r23, 0x02	; 2
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	show_register_val(status,"STATUS:  ");
 974:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <status>
 978:	6e ed       	ldi	r22, 0xDE	; 222
 97a:	71 e0       	ldi	r23, 0x01	; 1
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	serial_writeln("------------------\n\r");
 982:	88 ee       	ldi	r24, 0xE8	; 232
 984:	91 e0       	ldi	r25, 0x01	; 1
 986:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 98a:	bf ef       	ldi	r27, 0xFF	; 255
 98c:	24 e3       	ldi	r18, 0x34	; 52
 98e:	8c e0       	ldi	r24, 0x0C	; 12
 990:	b1 50       	subi	r27, 0x01	; 1
 992:	20 40       	sbci	r18, 0x00	; 0
 994:	80 40       	sbci	r24, 0x00	; 0
 996:	e1 f7       	brne	.-8      	; 0x990 <__stack+0x91>
 998:	00 c0       	rjmp	.+0      	; 0x99a <__stack+0x9b>
 99a:	00 00       	nop
	_delay_ms(500);
}
 99c:	0f 90       	pop	r0
 99e:	df 91       	pop	r29
 9a0:	cf 91       	pop	r28
 9a2:	1f 91       	pop	r17
 9a4:	0f 91       	pop	r16
 9a6:	ff 90       	pop	r15
 9a8:	ef 90       	pop	r14
 9aa:	08 95       	ret

000009ac <show_board_info>:
	
    set_high(rf->ce);
	serial_writeln("CE HIGH");
}

void show_board_info(nRF24L01 *rf){
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	ec 01       	movw	r28, r24
	serial_writeln("Logging info from the board..");
 9b2:	86 ea       	ldi	r24, 0xA6	; 166
 9b4:	92 e0       	ldi	r25, 0x02	; 2
 9b6:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	
	
	serial_writeln("Reading CONFIG register..");
 9ba:	84 ec       	ldi	r24, 0xC4	; 196
 9bc:	92 e0       	ldi	r25, 0x02	; 2
 9be:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	
	status = nRF24L01_read_register(rf, CONFIG, &temp , 1);
 9c2:	21 e0       	ldi	r18, 0x01	; 1
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	47 e0       	ldi	r20, 0x07	; 7
 9c8:	54 e0       	ldi	r21, 0x04	; 4
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	ce 01       	movw	r24, r28
 9ce:	0e 94 60 01 	call	0x2c0	; 0x2c0 <nRF24L01_read_register>
 9d2:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <status>
	show_register_val(temp,"CONFIG:  ");
 9d6:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <temp>
 9da:	64 ed       	ldi	r22, 0xD4	; 212
 9dc:	71 e0       	ldi	r23, 0x01	; 1
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	show_register_val(status,"STATUS:  ");
 9e4:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <status>
 9e8:	6e ed       	ldi	r22, 0xDE	; 222
 9ea:	71 e0       	ldi	r23, 0x01	; 1
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	serial_writeln("------------------\n\r");
 9f2:	88 ee       	ldi	r24, 0xE8	; 232
 9f4:	91 e0       	ldi	r25, 0x01	; 1
 9f6:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 9fa:	2f ef       	ldi	r18, 0xFF	; 255
 9fc:	84 e3       	ldi	r24, 0x34	; 52
 9fe:	9c e0       	ldi	r25, 0x0C	; 12
 a00:	21 50       	subi	r18, 0x01	; 1
 a02:	80 40       	sbci	r24, 0x00	; 0
 a04:	90 40       	sbci	r25, 0x00	; 0
 a06:	e1 f7       	brne	.-8      	; 0xa00 <show_board_info+0x54>
 a08:	00 c0       	rjmp	.+0      	; 0xa0a <show_board_info+0x5e>
 a0a:	00 00       	nop
	_delay_ms(500);
	
	
	serial_writeln("Reading SETUP_RETR register..");
 a0c:	8e ed       	ldi	r24, 0xDE	; 222
 a0e:	92 e0       	ldi	r25, 0x02	; 2
 a10:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	
	status = nRF24L01_read_register(rf, SETUP_RETR, &temp , 1);
 a14:	21 e0       	ldi	r18, 0x01	; 1
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	47 e0       	ldi	r20, 0x07	; 7
 a1a:	54 e0       	ldi	r21, 0x04	; 4
 a1c:	64 e0       	ldi	r22, 0x04	; 4
 a1e:	ce 01       	movw	r24, r28
 a20:	0e 94 60 01 	call	0x2c0	; 0x2c0 <nRF24L01_read_register>
 a24:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <status>
	show_register_val(temp,"SETUP_RETR:  ");
 a28:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <temp>
 a2c:	6c ef       	ldi	r22, 0xFC	; 252
 a2e:	72 e0       	ldi	r23, 0x02	; 2
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	show_register_val(status,"STATUS:  ");
 a36:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <status>
 a3a:	6e ed       	ldi	r22, 0xDE	; 222
 a3c:	71 e0       	ldi	r23, 0x01	; 1
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	serial_writeln("------------------\n\r");
 a44:	88 ee       	ldi	r24, 0xE8	; 232
 a46:	91 e0       	ldi	r25, 0x01	; 1
 a48:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 a4c:	2f ef       	ldi	r18, 0xFF	; 255
 a4e:	84 e3       	ldi	r24, 0x34	; 52
 a50:	9c e0       	ldi	r25, 0x0C	; 12
 a52:	21 50       	subi	r18, 0x01	; 1
 a54:	80 40       	sbci	r24, 0x00	; 0
 a56:	90 40       	sbci	r25, 0x00	; 0
 a58:	e1 f7       	brne	.-8      	; 0xa52 <show_board_info+0xa6>
 a5a:	00 c0       	rjmp	.+0      	; 0xa5c <show_board_info+0xb0>
 a5c:	00 00       	nop
	_delay_ms(500);
	
	
	serial_writeln("Reading RF_CH register..");
 a5e:	8a e0       	ldi	r24, 0x0A	; 10
 a60:	93 e0       	ldi	r25, 0x03	; 3
 a62:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	
	status = nRF24L01_read_register(rf, RF_CH, &temp , 1);
 a66:	21 e0       	ldi	r18, 0x01	; 1
 a68:	30 e0       	ldi	r19, 0x00	; 0
 a6a:	47 e0       	ldi	r20, 0x07	; 7
 a6c:	54 e0       	ldi	r21, 0x04	; 4
 a6e:	65 e0       	ldi	r22, 0x05	; 5
 a70:	ce 01       	movw	r24, r28
 a72:	0e 94 60 01 	call	0x2c0	; 0x2c0 <nRF24L01_read_register>
 a76:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <status>
	show_register_val(temp,"RF_CH:  ");
 a7a:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <temp>
 a7e:	63 e2       	ldi	r22, 0x23	; 35
 a80:	73 e0       	ldi	r23, 0x03	; 3
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	show_register_val(status,"STATUS:  ");
 a88:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <status>
 a8c:	6e ed       	ldi	r22, 0xDE	; 222
 a8e:	71 e0       	ldi	r23, 0x01	; 1
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	serial_writeln("------------------\n\r");
 a96:	88 ee       	ldi	r24, 0xE8	; 232
 a98:	91 e0       	ldi	r25, 0x01	; 1
 a9a:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 a9e:	2f ef       	ldi	r18, 0xFF	; 255
 aa0:	84 e3       	ldi	r24, 0x34	; 52
 aa2:	9c e0       	ldi	r25, 0x0C	; 12
 aa4:	21 50       	subi	r18, 0x01	; 1
 aa6:	80 40       	sbci	r24, 0x00	; 0
 aa8:	90 40       	sbci	r25, 0x00	; 0
 aaa:	e1 f7       	brne	.-8      	; 0xaa4 <show_board_info+0xf8>
 aac:	00 c0       	rjmp	.+0      	; 0xaae <show_board_info+0x102>
 aae:	00 00       	nop
	_delay_ms(500);
	
	
	serial_writeln("Reading RF_SETUP register..");
 ab0:	8c e2       	ldi	r24, 0x2C	; 44
 ab2:	93 e0       	ldi	r25, 0x03	; 3
 ab4:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
	
	status = nRF24L01_read_register(rf, RF_SETUP, &temp , 1);
 ab8:	21 e0       	ldi	r18, 0x01	; 1
 aba:	30 e0       	ldi	r19, 0x00	; 0
 abc:	47 e0       	ldi	r20, 0x07	; 7
 abe:	54 e0       	ldi	r21, 0x04	; 4
 ac0:	66 e0       	ldi	r22, 0x06	; 6
 ac2:	ce 01       	movw	r24, r28
 ac4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <nRF24L01_read_register>
 ac8:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <status>
	show_register_val(temp,"RF_SETUP:  ");
 acc:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <temp>
 ad0:	68 e4       	ldi	r22, 0x48	; 72
 ad2:	73 e0       	ldi	r23, 0x03	; 3
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	show_register_val(status,"STATUS:  ");
 ada:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <status>
 ade:	6e ed       	ldi	r22, 0xDE	; 222
 ae0:	71 e0       	ldi	r23, 0x01	; 1
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <show_register_val>
	serial_writeln("------------------\n\r");
 ae8:	88 ee       	ldi	r24, 0xE8	; 232
 aea:	91 e0       	ldi	r25, 0x01	; 1
 aec:	0e 94 01 02 	call	0x402	; 0x402 <serial_writeln>
 af0:	2f ef       	ldi	r18, 0xFF	; 255
 af2:	84 e3       	ldi	r24, 0x34	; 52
 af4:	9c e0       	ldi	r25, 0x0C	; 12
 af6:	21 50       	subi	r18, 0x01	; 1
 af8:	80 40       	sbci	r24, 0x00	; 0
 afa:	90 40       	sbci	r25, 0x00	; 0
 afc:	e1 f7       	brne	.-8      	; 0xaf6 <show_board_info+0x14a>
 afe:	00 c0       	rjmp	.+0      	; 0xb00 <show_board_info+0x154>
 b00:	00 00       	nop
	_delay_ms(500);
	
	
	
}
 b02:	df 91       	pop	r29
 b04:	cf 91       	pop	r28
 b06:	08 95       	ret

00000b08 <malloc>:
 b08:	0f 93       	push	r16
 b0a:	1f 93       	push	r17
 b0c:	cf 93       	push	r28
 b0e:	df 93       	push	r29
 b10:	82 30       	cpi	r24, 0x02	; 2
 b12:	91 05       	cpc	r25, r1
 b14:	10 f4       	brcc	.+4      	; 0xb1a <malloc+0x12>
 b16:	82 e0       	ldi	r24, 0x02	; 2
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	e0 91 0b 04 	lds	r30, 0x040B	; 0x80040b <__flp>
 b1e:	f0 91 0c 04 	lds	r31, 0x040C	; 0x80040c <__flp+0x1>
 b22:	20 e0       	ldi	r18, 0x00	; 0
 b24:	30 e0       	ldi	r19, 0x00	; 0
 b26:	a0 e0       	ldi	r26, 0x00	; 0
 b28:	b0 e0       	ldi	r27, 0x00	; 0
 b2a:	30 97       	sbiw	r30, 0x00	; 0
 b2c:	19 f1       	breq	.+70     	; 0xb74 <malloc+0x6c>
 b2e:	40 81       	ld	r20, Z
 b30:	51 81       	ldd	r21, Z+1	; 0x01
 b32:	02 81       	ldd	r16, Z+2	; 0x02
 b34:	13 81       	ldd	r17, Z+3	; 0x03
 b36:	48 17       	cp	r20, r24
 b38:	59 07       	cpc	r21, r25
 b3a:	c8 f0       	brcs	.+50     	; 0xb6e <malloc+0x66>
 b3c:	84 17       	cp	r24, r20
 b3e:	95 07       	cpc	r25, r21
 b40:	69 f4       	brne	.+26     	; 0xb5c <malloc+0x54>
 b42:	10 97       	sbiw	r26, 0x00	; 0
 b44:	31 f0       	breq	.+12     	; 0xb52 <malloc+0x4a>
 b46:	12 96       	adiw	r26, 0x02	; 2
 b48:	0c 93       	st	X, r16
 b4a:	12 97       	sbiw	r26, 0x02	; 2
 b4c:	13 96       	adiw	r26, 0x03	; 3
 b4e:	1c 93       	st	X, r17
 b50:	27 c0       	rjmp	.+78     	; 0xba0 <malloc+0x98>
 b52:	00 93 0b 04 	sts	0x040B, r16	; 0x80040b <__flp>
 b56:	10 93 0c 04 	sts	0x040C, r17	; 0x80040c <__flp+0x1>
 b5a:	22 c0       	rjmp	.+68     	; 0xba0 <malloc+0x98>
 b5c:	21 15       	cp	r18, r1
 b5e:	31 05       	cpc	r19, r1
 b60:	19 f0       	breq	.+6      	; 0xb68 <malloc+0x60>
 b62:	42 17       	cp	r20, r18
 b64:	53 07       	cpc	r21, r19
 b66:	18 f4       	brcc	.+6      	; 0xb6e <malloc+0x66>
 b68:	9a 01       	movw	r18, r20
 b6a:	bd 01       	movw	r22, r26
 b6c:	ef 01       	movw	r28, r30
 b6e:	df 01       	movw	r26, r30
 b70:	f8 01       	movw	r30, r16
 b72:	db cf       	rjmp	.-74     	; 0xb2a <malloc+0x22>
 b74:	21 15       	cp	r18, r1
 b76:	31 05       	cpc	r19, r1
 b78:	f9 f0       	breq	.+62     	; 0xbb8 <malloc+0xb0>
 b7a:	28 1b       	sub	r18, r24
 b7c:	39 0b       	sbc	r19, r25
 b7e:	24 30       	cpi	r18, 0x04	; 4
 b80:	31 05       	cpc	r19, r1
 b82:	80 f4       	brcc	.+32     	; 0xba4 <malloc+0x9c>
 b84:	8a 81       	ldd	r24, Y+2	; 0x02
 b86:	9b 81       	ldd	r25, Y+3	; 0x03
 b88:	61 15       	cp	r22, r1
 b8a:	71 05       	cpc	r23, r1
 b8c:	21 f0       	breq	.+8      	; 0xb96 <malloc+0x8e>
 b8e:	fb 01       	movw	r30, r22
 b90:	93 83       	std	Z+3, r25	; 0x03
 b92:	82 83       	std	Z+2, r24	; 0x02
 b94:	04 c0       	rjmp	.+8      	; 0xb9e <malloc+0x96>
 b96:	90 93 0c 04 	sts	0x040C, r25	; 0x80040c <__flp+0x1>
 b9a:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <__flp>
 b9e:	fe 01       	movw	r30, r28
 ba0:	32 96       	adiw	r30, 0x02	; 2
 ba2:	44 c0       	rjmp	.+136    	; 0xc2c <malloc+0x124>
 ba4:	fe 01       	movw	r30, r28
 ba6:	e2 0f       	add	r30, r18
 ba8:	f3 1f       	adc	r31, r19
 baa:	81 93       	st	Z+, r24
 bac:	91 93       	st	Z+, r25
 bae:	22 50       	subi	r18, 0x02	; 2
 bb0:	31 09       	sbc	r19, r1
 bb2:	39 83       	std	Y+1, r19	; 0x01
 bb4:	28 83       	st	Y, r18
 bb6:	3a c0       	rjmp	.+116    	; 0xc2c <malloc+0x124>
 bb8:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <__brkval>
 bbc:	30 91 0a 04 	lds	r19, 0x040A	; 0x80040a <__brkval+0x1>
 bc0:	23 2b       	or	r18, r19
 bc2:	41 f4       	brne	.+16     	; 0xbd4 <malloc+0xcc>
 bc4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 bc8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 bcc:	30 93 0a 04 	sts	0x040A, r19	; 0x80040a <__brkval+0x1>
 bd0:	20 93 09 04 	sts	0x0409, r18	; 0x800409 <__brkval>
 bd4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 bd8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 bdc:	21 15       	cp	r18, r1
 bde:	31 05       	cpc	r19, r1
 be0:	41 f4       	brne	.+16     	; 0xbf2 <malloc+0xea>
 be2:	2d b7       	in	r18, 0x3d	; 61
 be4:	3e b7       	in	r19, 0x3e	; 62
 be6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 bea:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 bee:	24 1b       	sub	r18, r20
 bf0:	35 0b       	sbc	r19, r21
 bf2:	e0 91 09 04 	lds	r30, 0x0409	; 0x800409 <__brkval>
 bf6:	f0 91 0a 04 	lds	r31, 0x040A	; 0x80040a <__brkval+0x1>
 bfa:	e2 17       	cp	r30, r18
 bfc:	f3 07       	cpc	r31, r19
 bfe:	a0 f4       	brcc	.+40     	; 0xc28 <malloc+0x120>
 c00:	2e 1b       	sub	r18, r30
 c02:	3f 0b       	sbc	r19, r31
 c04:	28 17       	cp	r18, r24
 c06:	39 07       	cpc	r19, r25
 c08:	78 f0       	brcs	.+30     	; 0xc28 <malloc+0x120>
 c0a:	ac 01       	movw	r20, r24
 c0c:	4e 5f       	subi	r20, 0xFE	; 254
 c0e:	5f 4f       	sbci	r21, 0xFF	; 255
 c10:	24 17       	cp	r18, r20
 c12:	35 07       	cpc	r19, r21
 c14:	48 f0       	brcs	.+18     	; 0xc28 <malloc+0x120>
 c16:	4e 0f       	add	r20, r30
 c18:	5f 1f       	adc	r21, r31
 c1a:	50 93 0a 04 	sts	0x040A, r21	; 0x80040a <__brkval+0x1>
 c1e:	40 93 09 04 	sts	0x0409, r20	; 0x800409 <__brkval>
 c22:	81 93       	st	Z+, r24
 c24:	91 93       	st	Z+, r25
 c26:	02 c0       	rjmp	.+4      	; 0xc2c <malloc+0x124>
 c28:	e0 e0       	ldi	r30, 0x00	; 0
 c2a:	f0 e0       	ldi	r31, 0x00	; 0
 c2c:	cf 01       	movw	r24, r30
 c2e:	df 91       	pop	r29
 c30:	cf 91       	pop	r28
 c32:	1f 91       	pop	r17
 c34:	0f 91       	pop	r16
 c36:	08 95       	ret

00000c38 <free>:
 c38:	cf 93       	push	r28
 c3a:	df 93       	push	r29
 c3c:	00 97       	sbiw	r24, 0x00	; 0
 c3e:	09 f4       	brne	.+2      	; 0xc42 <free+0xa>
 c40:	81 c0       	rjmp	.+258    	; 0xd44 <free+0x10c>
 c42:	fc 01       	movw	r30, r24
 c44:	32 97       	sbiw	r30, 0x02	; 2
 c46:	13 82       	std	Z+3, r1	; 0x03
 c48:	12 82       	std	Z+2, r1	; 0x02
 c4a:	a0 91 0b 04 	lds	r26, 0x040B	; 0x80040b <__flp>
 c4e:	b0 91 0c 04 	lds	r27, 0x040C	; 0x80040c <__flp+0x1>
 c52:	10 97       	sbiw	r26, 0x00	; 0
 c54:	81 f4       	brne	.+32     	; 0xc76 <free+0x3e>
 c56:	20 81       	ld	r18, Z
 c58:	31 81       	ldd	r19, Z+1	; 0x01
 c5a:	82 0f       	add	r24, r18
 c5c:	93 1f       	adc	r25, r19
 c5e:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <__brkval>
 c62:	30 91 0a 04 	lds	r19, 0x040A	; 0x80040a <__brkval+0x1>
 c66:	28 17       	cp	r18, r24
 c68:	39 07       	cpc	r19, r25
 c6a:	51 f5       	brne	.+84     	; 0xcc0 <free+0x88>
 c6c:	f0 93 0a 04 	sts	0x040A, r31	; 0x80040a <__brkval+0x1>
 c70:	e0 93 09 04 	sts	0x0409, r30	; 0x800409 <__brkval>
 c74:	67 c0       	rjmp	.+206    	; 0xd44 <free+0x10c>
 c76:	ed 01       	movw	r28, r26
 c78:	20 e0       	ldi	r18, 0x00	; 0
 c7a:	30 e0       	ldi	r19, 0x00	; 0
 c7c:	ce 17       	cp	r28, r30
 c7e:	df 07       	cpc	r29, r31
 c80:	40 f4       	brcc	.+16     	; 0xc92 <free+0x5a>
 c82:	4a 81       	ldd	r20, Y+2	; 0x02
 c84:	5b 81       	ldd	r21, Y+3	; 0x03
 c86:	9e 01       	movw	r18, r28
 c88:	41 15       	cp	r20, r1
 c8a:	51 05       	cpc	r21, r1
 c8c:	f1 f0       	breq	.+60     	; 0xcca <free+0x92>
 c8e:	ea 01       	movw	r28, r20
 c90:	f5 cf       	rjmp	.-22     	; 0xc7c <free+0x44>
 c92:	d3 83       	std	Z+3, r29	; 0x03
 c94:	c2 83       	std	Z+2, r28	; 0x02
 c96:	40 81       	ld	r20, Z
 c98:	51 81       	ldd	r21, Z+1	; 0x01
 c9a:	84 0f       	add	r24, r20
 c9c:	95 1f       	adc	r25, r21
 c9e:	c8 17       	cp	r28, r24
 ca0:	d9 07       	cpc	r29, r25
 ca2:	59 f4       	brne	.+22     	; 0xcba <free+0x82>
 ca4:	88 81       	ld	r24, Y
 ca6:	99 81       	ldd	r25, Y+1	; 0x01
 ca8:	84 0f       	add	r24, r20
 caa:	95 1f       	adc	r25, r21
 cac:	02 96       	adiw	r24, 0x02	; 2
 cae:	91 83       	std	Z+1, r25	; 0x01
 cb0:	80 83       	st	Z, r24
 cb2:	8a 81       	ldd	r24, Y+2	; 0x02
 cb4:	9b 81       	ldd	r25, Y+3	; 0x03
 cb6:	93 83       	std	Z+3, r25	; 0x03
 cb8:	82 83       	std	Z+2, r24	; 0x02
 cba:	21 15       	cp	r18, r1
 cbc:	31 05       	cpc	r19, r1
 cbe:	29 f4       	brne	.+10     	; 0xcca <free+0x92>
 cc0:	f0 93 0c 04 	sts	0x040C, r31	; 0x80040c <__flp+0x1>
 cc4:	e0 93 0b 04 	sts	0x040B, r30	; 0x80040b <__flp>
 cc8:	3d c0       	rjmp	.+122    	; 0xd44 <free+0x10c>
 cca:	e9 01       	movw	r28, r18
 ccc:	fb 83       	std	Y+3, r31	; 0x03
 cce:	ea 83       	std	Y+2, r30	; 0x02
 cd0:	49 91       	ld	r20, Y+
 cd2:	59 91       	ld	r21, Y+
 cd4:	c4 0f       	add	r28, r20
 cd6:	d5 1f       	adc	r29, r21
 cd8:	ec 17       	cp	r30, r28
 cda:	fd 07       	cpc	r31, r29
 cdc:	61 f4       	brne	.+24     	; 0xcf6 <free+0xbe>
 cde:	80 81       	ld	r24, Z
 ce0:	91 81       	ldd	r25, Z+1	; 0x01
 ce2:	84 0f       	add	r24, r20
 ce4:	95 1f       	adc	r25, r21
 ce6:	02 96       	adiw	r24, 0x02	; 2
 ce8:	e9 01       	movw	r28, r18
 cea:	99 83       	std	Y+1, r25	; 0x01
 cec:	88 83       	st	Y, r24
 cee:	82 81       	ldd	r24, Z+2	; 0x02
 cf0:	93 81       	ldd	r25, Z+3	; 0x03
 cf2:	9b 83       	std	Y+3, r25	; 0x03
 cf4:	8a 83       	std	Y+2, r24	; 0x02
 cf6:	e0 e0       	ldi	r30, 0x00	; 0
 cf8:	f0 e0       	ldi	r31, 0x00	; 0
 cfa:	12 96       	adiw	r26, 0x02	; 2
 cfc:	8d 91       	ld	r24, X+
 cfe:	9c 91       	ld	r25, X
 d00:	13 97       	sbiw	r26, 0x03	; 3
 d02:	00 97       	sbiw	r24, 0x00	; 0
 d04:	19 f0       	breq	.+6      	; 0xd0c <free+0xd4>
 d06:	fd 01       	movw	r30, r26
 d08:	dc 01       	movw	r26, r24
 d0a:	f7 cf       	rjmp	.-18     	; 0xcfa <free+0xc2>
 d0c:	8d 91       	ld	r24, X+
 d0e:	9c 91       	ld	r25, X
 d10:	11 97       	sbiw	r26, 0x01	; 1
 d12:	9d 01       	movw	r18, r26
 d14:	2e 5f       	subi	r18, 0xFE	; 254
 d16:	3f 4f       	sbci	r19, 0xFF	; 255
 d18:	82 0f       	add	r24, r18
 d1a:	93 1f       	adc	r25, r19
 d1c:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <__brkval>
 d20:	30 91 0a 04 	lds	r19, 0x040A	; 0x80040a <__brkval+0x1>
 d24:	28 17       	cp	r18, r24
 d26:	39 07       	cpc	r19, r25
 d28:	69 f4       	brne	.+26     	; 0xd44 <free+0x10c>
 d2a:	30 97       	sbiw	r30, 0x00	; 0
 d2c:	29 f4       	brne	.+10     	; 0xd38 <free+0x100>
 d2e:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <__flp+0x1>
 d32:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <__flp>
 d36:	02 c0       	rjmp	.+4      	; 0xd3c <free+0x104>
 d38:	13 82       	std	Z+3, r1	; 0x03
 d3a:	12 82       	std	Z+2, r1	; 0x02
 d3c:	b0 93 0a 04 	sts	0x040A, r27	; 0x80040a <__brkval+0x1>
 d40:	a0 93 09 04 	sts	0x0409, r26	; 0x800409 <__brkval>
 d44:	df 91       	pop	r29
 d46:	cf 91       	pop	r28
 d48:	08 95       	ret

00000d4a <strrev>:
 d4a:	dc 01       	movw	r26, r24
 d4c:	fc 01       	movw	r30, r24
 d4e:	67 2f       	mov	r22, r23
 d50:	71 91       	ld	r23, Z+
 d52:	77 23       	and	r23, r23
 d54:	e1 f7       	brne	.-8      	; 0xd4e <strrev+0x4>
 d56:	32 97       	sbiw	r30, 0x02	; 2
 d58:	04 c0       	rjmp	.+8      	; 0xd62 <strrev+0x18>
 d5a:	7c 91       	ld	r23, X
 d5c:	6d 93       	st	X+, r22
 d5e:	70 83       	st	Z, r23
 d60:	62 91       	ld	r22, -Z
 d62:	ae 17       	cp	r26, r30
 d64:	bf 07       	cpc	r27, r31
 d66:	c8 f3       	brcs	.-14     	; 0xd5a <strrev+0x10>
 d68:	08 95       	ret

00000d6a <_exit>:
 d6a:	f8 94       	cli

00000d6c <__stop_program>:
 d6c:	ff cf       	rjmp	.-2      	; 0xd6c <__stop_program>
