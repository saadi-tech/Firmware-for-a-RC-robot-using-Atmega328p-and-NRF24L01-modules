
tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000030c  00800100  00001638  000016cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001638  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080040c  0080040c  000019d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f20  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd9  00000000  00000000  00004ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb3  00000000  00000000  000056bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  00006570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075c  00000000  00000000  000069d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017ee  00000000  00000000  0000712c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000891a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e3       	ldi	r30, 0x38	; 56
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 30       	cpi	r26, 0x0C	; 12
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	ac e0       	ldi	r26, 0x0C	; 12
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 31       	cpi	r26, 0x16	; 22
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
      9e:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:


void init_ADC(){
	
	// Select Vref=AVcc
	ADMUX |= (1<<REFS0);
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 64       	ori	r24, 0x40	; 64
      ae:	80 83       	st	Z, r24
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADEN);
      b0:	ea e7       	ldi	r30, 0x7A	; 122
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	86 68       	ori	r24, 0x86	; 134
      b8:	80 83       	st	Z, r24
      ba:	08 95       	ret

000000bc <ReadADC>:
}

uint16_t ReadADC(uint8_t ADCchannel)
{ uint16_t val;
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
      bc:	ec e7       	ldi	r30, 0x7C	; 124
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	90 81       	ld	r25, Z
      c2:	90 7f       	andi	r25, 0xF0	; 240
      c4:	8f 70       	andi	r24, 0x0F	; 15
      c6:	89 2b       	or	r24, r25
      c8:	80 83       	st	Z, r24
	//single conversion mode
	ADCSRA |= (1<<ADSC);
      ca:	ea e7       	ldi	r30, 0x7A	; 122
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	80 81       	ld	r24, Z
      d0:	80 64       	ori	r24, 0x40	; 64
      d2:	80 83       	st	Z, r24
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
      d4:	80 81       	ld	r24, Z
      d6:	86 fd       	sbrc	r24, 6
      d8:	fd cf       	rjmp	.-6      	; 0xd4 <ReadADC+0x18>
	val = ADC;
      da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
      de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	
	return val;
}
      e2:	08 95       	ret

000000e4 <setup_rf>:
nRF24L01 *setup_rf(void) {
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
	nRF24L01 *rf = nRF24L01_init();
      e8:	0e 94 c9 01 	call	0x392	; 0x392 <nRF24L01_init>
      ec:	ec 01       	movw	r28, r24
	rf->ss.port = &PORTB;
      ee:	85 e2       	ldi	r24, 0x25	; 37
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	99 83       	std	Y+1, r25	; 0x01
      f4:	88 83       	st	Y, r24
	rf->ss.pin = PB2;
      f6:	22 e0       	ldi	r18, 0x02	; 2
      f8:	2a 83       	std	Y+2, r18	; 0x02
	rf->ce.port = &PORTB;
      fa:	9c 83       	std	Y+4, r25	; 0x04
      fc:	8b 83       	std	Y+3, r24	; 0x03
	rf->ce.pin = PB1;
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	2d 83       	std	Y+5, r18	; 0x05
	rf->sck.port = &PORTB;
     102:	9f 83       	std	Y+7, r25	; 0x07
     104:	8e 83       	std	Y+6, r24	; 0x06
	rf->sck.pin = PB5;
     106:	25 e0       	ldi	r18, 0x05	; 5
     108:	28 87       	std	Y+8, r18	; 0x08
	rf->mosi.port = &PORTB;
     10a:	9a 87       	std	Y+10, r25	; 0x0a
     10c:	89 87       	std	Y+9, r24	; 0x09
	rf->mosi.pin = PB3;
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	2b 87       	std	Y+11, r18	; 0x0b
	rf->miso.port = &PORTB;
     112:	9d 87       	std	Y+13, r25	; 0x0d
     114:	8c 87       	std	Y+12, r24	; 0x0c
	rf->miso.pin = PB4;
     116:	84 e0       	ldi	r24, 0x04	; 4
     118:	8e 87       	std	Y+14, r24	; 0x0e
	// interrupt on falling edge of INT0 (PD2)
	EICRA |= _BV(ISC01);
     11a:	e9 e6       	ldi	r30, 0x69	; 105
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	82 60       	ori	r24, 0x02	; 2
     122:	80 83       	st	Z, r24
	EIMSK |= _BV(INT0);
     124:	e8 9a       	sbi	0x1d, 0	; 29
	nRF24L01_begin(rf);
     126:	ce 01       	movw	r24, r28
     128:	0e 94 f7 03 	call	0x7ee	; 0x7ee <nRF24L01_begin>
	return rf;
}
     12c:	ce 01       	movw	r24, r28
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	08 95       	ret

00000134 <setup_timer>:

// setup timer to trigger interrupt every second when at 1MHz
void setup_timer(void) {
	TCCR1B |= _BV(WGM12);
     134:	e1 e8       	ldi	r30, 0x81	; 129
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	88 60       	ori	r24, 0x08	; 8
     13c:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1A);
     13e:	af e6       	ldi	r26, 0x6F	; 111
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	8c 91       	ld	r24, X
     144:	82 60       	ori	r24, 0x02	; 2
     146:	8c 93       	st	X, r24
	OCR1A = 10000;
     148:	80 e1       	ldi	r24, 0x10	; 16
     14a:	97 e2       	ldi	r25, 0x27	; 39
     14c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     150:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCCR1B |= _BV(CS12);
     154:	80 81       	ld	r24, Z
     156:	84 60       	ori	r24, 0x04	; 4
     158:	80 83       	st	Z, r24
     15a:	08 95       	ret

0000015c <main>:
nRF24L01 *setup_rf(void);
uint16_t ReadADC(uint8_t ADCchannel);
volatile bool rf_interrupt = false;
volatile bool send_message = false;
uint16_t value = 0;
int main(void) {
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
     164:	ac 97       	sbiw	r28, 0x2c	; 44
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	f8 94       	cli
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	0f be       	out	0x3f, r0	; 63
     16e:	cd bf       	out	0x3d, r28	; 61
	uint8_t to_address[5] = { 0x01, 0x01, 0x01, 0x01, 0x01 };
     170:	85 e0       	ldi	r24, 0x05	; 5
     172:	e6 e0       	ldi	r30, 0x06	; 6
     174:	f1 e0       	ldi	r31, 0x01	; 1
     176:	de 01       	movw	r26, r28
     178:	11 96       	adiw	r26, 0x01	; 1
     17a:	01 90       	ld	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	8a 95       	dec	r24
     180:	e1 f7       	brne	.-8      	; 0x17a <main+0x1e>
	bool on = false;
	
	DDRC |= 0b00001100;
     182:	87 b1       	in	r24, 0x07	; 7
     184:	8c 60       	ori	r24, 0x0C	; 12
     186:	87 b9       	out	0x07, r24	; 7
	PORTC &= 0b11110011;
     188:	88 b1       	in	r24, 0x08	; 8
     18a:	83 7f       	andi	r24, 0xF3	; 243
     18c:	88 b9       	out	0x08, r24	; 8
	
	init_ADC();
     18e:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
	uart_init(9600);
     192:	80 e8       	ldi	r24, 0x80	; 128
     194:	95 e2       	ldi	r25, 0x25	; 37
     196:	0e 94 4e 02 	call	0x49c	; 0x49c <uart_init>
	start_msg();
     19a:	0e 94 a0 03 	call	0x740	; 0x740 <start_msg>
	
	
	sei();
     19e:	78 94       	sei
	nRF24L01 *rf = setup_rf();
     1a0:	0e 94 72 00 	call	0xe4	; 0xe4 <setup_rf>
     1a4:	8c 01       	movw	r16, r24
	setup_timer();
     1a6:	0e 94 9a 00 	call	0x134	; 0x134 <setup_timer>
	set_tx_address(rf,to_address);
     1aa:	be 01       	movw	r22, r28
     1ac:	6f 5f       	subi	r22, 0xFF	; 255
     1ae:	7f 4f       	sbci	r23, 0xFF	; 255
     1b0:	c8 01       	movw	r24, r16
     1b2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <set_tx_address>
			char Y[2];
			
			value = ReadADC(0);
			
			value = value/102.4;
			sprintf(X, "%d",value);
     1b6:	0f 2e       	mov	r0, r31
     1b8:	f5 e2       	ldi	r31, 0x25	; 37
     1ba:	af 2e       	mov	r10, r31
     1bc:	f1 e0       	ldi	r31, 0x01	; 1
     1be:	bf 2e       	mov	r11, r31
     1c0:	f0 2d       	mov	r31, r0
     1c2:	6e 01       	movw	r12, r28
     1c4:	2b e2       	ldi	r18, 0x2B	; 43
     1c6:	c2 0e       	add	r12, r18
     1c8:	d1 1c       	adc	r13, r1
			
			value = ReadADC(1);
			value = value/102.4;
			
			sprintf(Y, "%d",value);
     1ca:	4e 01       	movw	r8, r28
     1cc:	89 e2       	ldi	r24, 0x29	; 41
     1ce:	88 0e       	add	r8, r24
     1d0:	91 1c       	adc	r9, r1
			
			strcat(X,Y);
				
			memcpy(msg.data, X, 3);
     1d2:	7e 01       	movw	r14, r28
     1d4:	98 e0       	ldi	r25, 0x08	; 8
     1d6:	e9 0e       	add	r14, r25
     1d8:	f1 1c       	adc	r15, r1
	set_tx_address(rf,to_address);
	
	
	while (true) {
		
		if (rf_interrupt) {
     1da:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <rf_interrupt>
     1de:	88 23       	and	r24, r24
     1e0:	61 f1       	breq	.+88     	; 0x23a <main+0xde>
			rf_interrupt = false;
     1e2:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <rf_interrupt>
			
			int success = nRF24L01_transmit_success(rf);
     1e6:	c8 01       	movw	r24, r16
     1e8:	0e 94 41 03 	call	0x682	; 0x682 <nRF24L01_transmit_success>
			
			if (success != 0){
     1ec:	89 2b       	or	r24, r25
     1ee:	99 f0       	breq	.+38     	; 0x216 <main+0xba>
				serial_writeln("Buffer FULL..");
     1f0:	8b e0       	ldi	r24, 0x0B	; 11
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
				nRF24L01_flush_transmit_message(rf);
     1f8:	c8 01       	movw	r24, r16
     1fa:	0e 94 20 02 	call	0x440	; 0x440 <nRF24L01_flush_transmit_message>
				PORTC |= 0b00001000;
     1fe:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     200:	ef e7       	ldi	r30, 0x7F	; 127
     202:	f9 ea       	ldi	r31, 0xA9	; 169
     204:	23 e0       	ldi	r18, 0x03	; 3
     206:	e1 50       	subi	r30, 0x01	; 1
     208:	f0 40       	sbci	r31, 0x00	; 0
     20a:	20 40       	sbci	r18, 0x00	; 0
     20c:	e1 f7       	brne	.-8      	; 0x206 <main+0xaa>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0xb4>
     210:	00 00       	nop
				_delay_ms(150);
				PORTC &= 0b11110111;
     212:	43 98       	cbi	0x08, 3	; 8
     214:	12 c0       	rjmp	.+36     	; 0x23a <main+0xde>
			}
			else{
				nRF24L01_flush_transmit_message(rf);
     216:	c8 01       	movw	r24, r16
     218:	0e 94 20 02 	call	0x440	; 0x440 <nRF24L01_flush_transmit_message>
				
				serial_writeln("MSG Sent...");
     21c:	89 e1       	ldi	r24, 0x19	; 25
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
				
				PORTC |= 0b00000100;
     224:	42 9a       	sbi	0x08, 2	; 8
     226:	8f e7       	ldi	r24, 0x7F	; 127
     228:	99 ea       	ldi	r25, 0xA9	; 169
     22a:	e3 e0       	ldi	r30, 0x03	; 3
     22c:	81 50       	subi	r24, 0x01	; 1
     22e:	90 40       	sbci	r25, 0x00	; 0
     230:	e0 40       	sbci	r30, 0x00	; 0
     232:	e1 f7       	brne	.-8      	; 0x22c <main+0xd0>
     234:	00 c0       	rjmp	.+0      	; 0x236 <main+0xda>
     236:	00 00       	nop
				_delay_ms(150);
				PORTC &= 0b11111011;
     238:	42 98       	cbi	0x08, 2	; 8
			}
		}

		if (send_message) {
     23a:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <send_message>
     23e:	88 23       	and	r24, r24
     240:	61 f2       	breq	.-104    	; 0x1da <main+0x7e>
			send_message = false;
     242:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <send_message>
			nRF24L01Message msg;
			
			char X[2];
			char Y[2];
			
			value = ReadADC(0);
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	0e 94 5e 00 	call	0xbc	; 0xbc <ReadADC>
			
			value = value/102.4;
     24c:	bc 01       	movw	r22, r24
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 66 06 	call	0xccc	; 0xccc <__floatunsisf>
     256:	2d ec       	ldi	r18, 0xCD	; 205
     258:	3c ec       	ldi	r19, 0xCC	; 204
     25a:	4c ec       	ldi	r20, 0xCC	; 204
     25c:	52 e4       	ldi	r21, 0x42	; 66
     25e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__divsf3>
     262:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fixunssfsi>
     266:	60 93 0c 04 	sts	0x040C, r22	; 0x80040c <__data_end>
     26a:	70 93 0d 04 	sts	0x040D, r23	; 0x80040d <__data_end+0x1>
			sprintf(X, "%d",value);
     26e:	7f 93       	push	r23
     270:	6f 93       	push	r22
     272:	bf 92       	push	r11
     274:	af 92       	push	r10
     276:	df 92       	push	r13
     278:	cf 92       	push	r12
     27a:	0e 94 30 08 	call	0x1060	; 0x1060 <sprintf>
			
			value = ReadADC(1);
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	0e 94 5e 00 	call	0xbc	; 0xbc <ReadADC>
			value = value/102.4;
     284:	bc 01       	movw	r22, r24
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 66 06 	call	0xccc	; 0xccc <__floatunsisf>
     28e:	2d ec       	ldi	r18, 0xCD	; 205
     290:	3c ec       	ldi	r19, 0xCC	; 204
     292:	4c ec       	ldi	r20, 0xCC	; 204
     294:	52 e4       	ldi	r21, 0x42	; 66
     296:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__divsf3>
     29a:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fixunssfsi>
     29e:	60 93 0c 04 	sts	0x040C, r22	; 0x80040c <__data_end>
     2a2:	70 93 0d 04 	sts	0x040D, r23	; 0x80040d <__data_end+0x1>
			
			sprintf(Y, "%d",value);
     2a6:	7f 93       	push	r23
     2a8:	6f 93       	push	r22
     2aa:	bf 92       	push	r11
     2ac:	af 92       	push	r10
     2ae:	9f 92       	push	r9
     2b0:	8f 92       	push	r8
     2b2:	0e 94 30 08 	call	0x1060	; 0x1060 <sprintf>
			
			strcat(X,Y);
     2b6:	b4 01       	movw	r22, r8
     2b8:	c6 01       	movw	r24, r12
     2ba:	0e 94 15 08 	call	0x102a	; 0x102a <strcat>
				
			memcpy(msg.data, X, 3);
     2be:	f6 01       	movw	r30, r12
     2c0:	80 81       	ld	r24, Z
     2c2:	91 81       	ldd	r25, Z+1	; 0x01
     2c4:	f7 01       	movw	r30, r14
     2c6:	91 83       	std	Z+1, r25	; 0x01
     2c8:	80 83       	st	Z, r24
     2ca:	f6 01       	movw	r30, r12
     2cc:	82 81       	ldd	r24, Z+2	; 0x02
     2ce:	f7 01       	movw	r30, r14
     2d0:	82 83       	std	Z+2, r24	; 0x02
			
			
			serial_write("MSG DATA: ");
     2d2:	88 e2       	ldi	r24, 0x28	; 40
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <serial_write>
			serial_writeln(msg.data);
     2da:	c7 01       	movw	r24, r14
     2dc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
			msg.length = strlen((char *)msg.data) + 1;
     2e0:	f7 01       	movw	r30, r14
     2e2:	01 90       	ld	r0, Z+
     2e4:	00 20       	and	r0, r0
     2e6:	e9 f7       	brne	.-6      	; 0x2e2 <main+0x186>
     2e8:	ee 19       	sub	r30, r14
     2ea:	e8 a7       	std	Y+40, r30	; 0x28
			nRF24L01_transmit(rf, to_address, &msg);
     2ec:	ae 01       	movw	r20, r28
     2ee:	4a 5f       	subi	r20, 0xFA	; 250
     2f0:	5f 4f       	sbci	r21, 0xFF	; 255
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	c8 01       	movw	r24, r16
     2fa:	0e 94 9c 02 	call	0x538	; 0x538 <nRF24L01_transmit>
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
     308:	68 cf       	rjmp	.-304    	; 0x1da <main+0x7e>

0000030a <__vector_11>:
	OCR1A = 10000;
	TCCR1B |= _BV(CS12);
}

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
     30a:	1f 92       	push	r1
     30c:	0f 92       	push	r0
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	0f 92       	push	r0
     312:	11 24       	eor	r1, r1
     314:	8f 93       	push	r24
	send_message = true;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <send_message>
}
     31c:	8f 91       	pop	r24
     31e:	0f 90       	pop	r0
     320:	0f be       	out	0x3f, r0	; 63
     322:	0f 90       	pop	r0
     324:	1f 90       	pop	r1
     326:	18 95       	reti

00000328 <__vector_1>:

// nRF24L01 interrupt
ISR(INT0_vect) {
     328:	1f 92       	push	r1
     32a:	0f 92       	push	r0
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	0f 92       	push	r0
     330:	11 24       	eor	r1, r1
     332:	2f 93       	push	r18
     334:	3f 93       	push	r19
     336:	4f 93       	push	r20
     338:	5f 93       	push	r21
     33a:	6f 93       	push	r22
     33c:	7f 93       	push	r23
     33e:	8f 93       	push	r24
     340:	9f 93       	push	r25
     342:	af 93       	push	r26
     344:	bf 93       	push	r27
     346:	ef 93       	push	r30
     348:	ff 93       	push	r31
	serial_writeln("Interrupt called...");
     34a:	83 e3       	ldi	r24, 0x33	; 51
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
	rf_interrupt = true;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <rf_interrupt>
}
     358:	ff 91       	pop	r31
     35a:	ef 91       	pop	r30
     35c:	bf 91       	pop	r27
     35e:	af 91       	pop	r26
     360:	9f 91       	pop	r25
     362:	8f 91       	pop	r24
     364:	7f 91       	pop	r23
     366:	6f 91       	pop	r22
     368:	5f 91       	pop	r21
     36a:	4f 91       	pop	r20
     36c:	3f 91       	pop	r19
     36e:	2f 91       	pop	r18
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <copy_address>:
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
	serial_writeln("CE HIGH");
}
     37a:	fc 01       	movw	r30, r24
     37c:	a6 2f       	mov	r26, r22
     37e:	b7 2f       	mov	r27, r23
     380:	9c 01       	movw	r18, r24
     382:	2b 5f       	subi	r18, 0xFB	; 251
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	91 91       	ld	r25, Z+
     388:	9d 93       	st	X+, r25
     38a:	e2 17       	cp	r30, r18
     38c:	f3 07       	cpc	r31, r19
     38e:	d9 f7       	brne	.-10     	; 0x386 <copy_address+0xc>
     390:	08 95       	ret

00000392 <nRF24L01_init>:
     392:	80 e1       	ldi	r24, 0x10	; 16
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 f4 06 	call	0xde8	; 0xde8 <malloc>
     39a:	20 e1       	ldi	r18, 0x10	; 16
     39c:	fc 01       	movw	r30, r24
     39e:	11 92       	st	Z+, r1
     3a0:	2a 95       	dec	r18
     3a2:	e9 f7       	brne	.-6      	; 0x39e <nRF24L01_init+0xc>
     3a4:	08 95       	ret

000003a6 <nRF24L01_send_command>:
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24
     3ac:	da 01       	movw	r26, r20
     3ae:	e8 81       	ld	r30, Y
     3b0:	f9 81       	ldd	r31, Y+1	; 0x01
     3b2:	50 81       	ld	r21, Z
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0a 80       	ldd	r0, Y+2	; 0x02
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <nRF24L01_send_command+0x1a>
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	0a 94       	dec	r0
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <nRF24L01_send_command+0x16>
     3c4:	80 95       	com	r24
     3c6:	85 23       	and	r24, r21
     3c8:	80 83       	st	Z, r24
     3ca:	6e bd       	out	0x2e, r22	; 46
     3cc:	0d b4       	in	r0, 0x2d	; 45
     3ce:	07 fe       	sbrs	r0, 7
     3d0:	fd cf       	rjmp	.-6      	; 0x3cc <nRF24L01_send_command+0x26>
     3d2:	8e b5       	in	r24, 0x2e	; 46
     3d4:	8f 87       	std	Y+15, r24	; 0x0f
     3d6:	21 15       	cp	r18, r1
     3d8:	31 05       	cpc	r19, r1
     3da:	79 f0       	breq	.+30     	; 0x3fa <nRF24L01_send_command+0x54>
     3dc:	fd 01       	movw	r30, r26
     3de:	2a 0f       	add	r18, r26
     3e0:	3b 1f       	adc	r19, r27
     3e2:	df 01       	movw	r26, r30
     3e4:	90 81       	ld	r25, Z
     3e6:	9e bd       	out	0x2e, r25	; 46
     3e8:	0d b4       	in	r0, 0x2d	; 45
     3ea:	07 fe       	sbrs	r0, 7
     3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <nRF24L01_send_command+0x42>
     3ee:	9e b5       	in	r25, 0x2e	; 46
     3f0:	9c 93       	st	X, r25
     3f2:	31 96       	adiw	r30, 0x01	; 1
     3f4:	e2 17       	cp	r30, r18
     3f6:	f3 07       	cpc	r31, r19
     3f8:	a1 f7       	brne	.-24     	; 0x3e2 <nRF24L01_send_command+0x3c>
     3fa:	e8 81       	ld	r30, Y
     3fc:	f9 81       	ldd	r31, Y+1	; 0x01
     3fe:	20 81       	ld	r18, Z
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0a 80       	ldd	r0, Y+2	; 0x02
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	0a 94       	dec	r0
     40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     410:	82 2b       	or	r24, r18
     412:	80 83       	st	Z, r24
     414:	8f 85       	ldd	r24, Y+15	; 0x0f
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <nRF24L01_write_register>:
     41c:	60 62       	ori	r22, 0x20	; 32
     41e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <nRF24L01_send_command>
     422:	08 95       	ret

00000424 <nRF24L01_read_register>:
     424:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <nRF24L01_send_command>
     428:	08 95       	ret

0000042a <nRF24L01_no_op>:
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	40 e0       	ldi	r20, 0x00	; 0
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	6f ef       	ldi	r22, 0xFF	; 255
     434:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <nRF24L01_send_command>
     438:	08 95       	ret

0000043a <nRF24L01_update_status>:
     43a:	0e 94 15 02 	call	0x42a	; 0x42a <nRF24L01_no_op>
     43e:	08 95       	ret

00000440 <nRF24L01_flush_transmit_message>:
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	61 ee       	ldi	r22, 0xE1	; 225
     44a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <nRF24L01_send_command>
     44e:	08 95       	ret

00000450 <nRF24L01_clear_interrupts>:
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	1f 92       	push	r1
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	20 e7       	ldi	r18, 0x70	; 112
     45c:	29 83       	std	Y+1, r18	; 0x01
     45e:	21 e0       	ldi	r18, 0x01	; 1
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	ae 01       	movw	r20, r28
     464:	4f 5f       	subi	r20, 0xFF	; 255
     466:	5f 4f       	sbci	r21, 0xFF	; 255
     468:	67 e0       	ldi	r22, 0x07	; 7
     46a:	0e 94 0e 02 	call	0x41c	; 0x41c <nRF24L01_write_register>
     46e:	0f 90       	pop	r0
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <nRF24L01_clear_transmit_interrupts>:
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	1f 92       	push	r1
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	20 e3       	ldi	r18, 0x30	; 48
     482:	29 83       	std	Y+1, r18	; 0x01
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	ae 01       	movw	r20, r28
     48a:	4f 5f       	subi	r20, 0xFF	; 255
     48c:	5f 4f       	sbci	r21, 0xFF	; 255
     48e:	67 e0       	ldi	r22, 0x07	; 7
     490:	0e 94 0e 02 	call	0x41c	; 0x41c <nRF24L01_write_register>
     494:	0f 90       	pop	r0
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <uart_init>:
     49c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     4a0:	83 e3       	ldi	r24, 0x33	; 51
     4a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     4a6:	86 e0       	ldi	r24, 0x06	; 6
     4a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     4ac:	88 e0       	ldi	r24, 0x08	; 8
     4ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     4b2:	08 95       	ret

000004b4 <serial_write>:
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	fc 01       	movw	r30, r24
     4ba:	01 90       	ld	r0, Z+
     4bc:	00 20       	and	r0, r0
     4be:	e9 f7       	brne	.-6      	; 0x4ba <serial_write+0x6>
     4c0:	31 97       	sbiw	r30, 0x01	; 1
     4c2:	e8 1b       	sub	r30, r24
     4c4:	f9 0b       	sbc	r31, r25
     4c6:	1e 16       	cp	r1, r30
     4c8:	1f 06       	cpc	r1, r31
     4ca:	84 f4       	brge	.+32     	; 0x4ec <serial_write+0x38>
     4cc:	dc 01       	movw	r26, r24
     4ce:	9c 01       	movw	r18, r24
     4d0:	2e 0f       	add	r18, r30
     4d2:	3f 1f       	adc	r19, r31
     4d4:	c6 ec       	ldi	r28, 0xC6	; 198
     4d6:	d0 e0       	ldi	r29, 0x00	; 0
     4d8:	e0 ec       	ldi	r30, 0xC0	; 192
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	9d 91       	ld	r25, X+
     4de:	98 83       	st	Y, r25
     4e0:	90 81       	ld	r25, Z
     4e2:	95 ff       	sbrs	r25, 5
     4e4:	fd cf       	rjmp	.-6      	; 0x4e0 <serial_write+0x2c>
     4e6:	a2 17       	cp	r26, r18
     4e8:	b3 07       	cpc	r27, r19
     4ea:	c1 f7       	brne	.-16     	; 0x4dc <serial_write+0x28>
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <serial_writeln>:
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	fc 01       	movw	r30, r24
     4f8:	01 90       	ld	r0, Z+
     4fa:	00 20       	and	r0, r0
     4fc:	e9 f7       	brne	.-6      	; 0x4f8 <serial_writeln+0x6>
     4fe:	31 97       	sbiw	r30, 0x01	; 1
     500:	e8 1b       	sub	r30, r24
     502:	f9 0b       	sbc	r31, r25
     504:	1e 16       	cp	r1, r30
     506:	1f 06       	cpc	r1, r31
     508:	84 f4       	brge	.+32     	; 0x52a <serial_writeln+0x38>
     50a:	dc 01       	movw	r26, r24
     50c:	9c 01       	movw	r18, r24
     50e:	2e 0f       	add	r18, r30
     510:	3f 1f       	adc	r19, r31
     512:	c6 ec       	ldi	r28, 0xC6	; 198
     514:	d0 e0       	ldi	r29, 0x00	; 0
     516:	e0 ec       	ldi	r30, 0xC0	; 192
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	9d 91       	ld	r25, X+
     51c:	98 83       	st	Y, r25
     51e:	90 81       	ld	r25, Z
     520:	95 ff       	sbrs	r25, 5
     522:	fd cf       	rjmp	.-6      	; 0x51e <serial_writeln+0x2c>
     524:	a2 17       	cp	r26, r18
     526:	b3 07       	cpc	r27, r19
     528:	c1 f7       	brne	.-16     	; 0x51a <serial_writeln+0x28>
     52a:	8a e2       	ldi	r24, 0x2A	; 42
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <serial_write>
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <nRF24L01_transmit>:
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	1f 92       	push	r1
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	8c 01       	movw	r16, r24
     54c:	7a 01       	movw	r14, r20
     54e:	8e e4       	ldi	r24, 0x4E	; 78
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
     556:	d7 01       	movw	r26, r14
     558:	92 96       	adiw	r26, 0x22	; 34
     55a:	2c 91       	ld	r18, X
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	a7 01       	movw	r20, r14
     560:	4e 5f       	subi	r20, 0xFE	; 254
     562:	5f 4f       	sbci	r21, 0xFF	; 255
     564:	60 ea       	ldi	r22, 0xA0	; 160
     566:	c8 01       	movw	r24, r16
     568:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <nRF24L01_send_command>
     56c:	21 e0       	ldi	r18, 0x01	; 1
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	ae 01       	movw	r20, r28
     572:	4f 5f       	subi	r20, 0xFF	; 255
     574:	5f 4f       	sbci	r21, 0xFF	; 255
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	c8 01       	movw	r24, r16
     57a:	0e 94 12 02 	call	0x424	; 0x424 <nRF24L01_read_register>
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	8e 7f       	andi	r24, 0xFE	; 254
     582:	89 83       	std	Y+1, r24	; 0x01
     584:	21 e0       	ldi	r18, 0x01	; 1
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	ae 01       	movw	r20, r28
     58a:	4f 5f       	subi	r20, 0xFF	; 255
     58c:	5f 4f       	sbci	r21, 0xFF	; 255
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	c8 01       	movw	r24, r16
     592:	0e 94 0e 02 	call	0x41c	; 0x41c <nRF24L01_write_register>
     596:	21 e0       	ldi	r18, 0x01	; 1
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	40 e1       	ldi	r20, 0x10	; 16
     59c:	54 e0       	ldi	r21, 0x04	; 4
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	c8 01       	movw	r24, r16
     5a2:	0e 94 12 02 	call	0x424	; 0x424 <nRF24L01_read_register>
     5a6:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <status>
     5aa:	80 ff       	sbrs	r24, 0
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <nRF24L01_transmit+0x7c>
     5ae:	c8 01       	movw	r24, r16
     5b0:	0e 94 20 02 	call	0x440	; 0x440 <nRF24L01_flush_transmit_message>
     5b4:	d8 01       	movw	r26, r16
     5b6:	13 96       	adiw	r26, 0x03	; 3
     5b8:	ed 91       	ld	r30, X+
     5ba:	fc 91       	ld	r31, X
     5bc:	14 97       	sbiw	r26, 0x04	; 4
     5be:	20 81       	ld	r18, Z
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	15 96       	adiw	r26, 0x05	; 5
     5c6:	0c 90       	ld	r0, X
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <nRF24L01_transmit+0x96>
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	0a 94       	dec	r0
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <nRF24L01_transmit+0x92>
     5d2:	82 2b       	or	r24, r18
     5d4:	80 83       	st	Z, r24
     5d6:	8d e5       	ldi	r24, 0x5D	; 93
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	08 95       	ret

000005ee <set_tx_address>:
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <set_tx_address+0xe>
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <set_tx_address+0x10>
     5fe:	00 d0       	rcall	.+0      	; 0x600 <set_tx_address+0x12>
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	8c 01       	movw	r16, r24
     606:	7b 01       	movw	r14, r22
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	ae 01       	movw	r20, r28
     612:	4f 5f       	subi	r20, 0xFF	; 255
     614:	5f 4f       	sbci	r21, 0xFF	; 255
     616:	62 e0       	ldi	r22, 0x02	; 2
     618:	c8 01       	movw	r24, r16
     61a:	0e 94 0e 02 	call	0x41c	; 0x41c <nRF24L01_write_register>
     61e:	c8 01       	movw	r24, r16
     620:	0e 94 3b 02 	call	0x476	; 0x476 <nRF24L01_clear_transmit_interrupts>
     624:	85 e6       	ldi	r24, 0x65	; 101
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
     62c:	be 01       	movw	r22, r28
     62e:	6e 5f       	subi	r22, 0xFE	; 254
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	c7 01       	movw	r24, r14
     634:	0e 94 bd 01 	call	0x37a	; 0x37a <copy_address>
     638:	25 e0       	ldi	r18, 0x05	; 5
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	ae 01       	movw	r20, r28
     63e:	4e 5f       	subi	r20, 0xFE	; 254
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	60 e1       	ldi	r22, 0x10	; 16
     644:	c8 01       	movw	r24, r16
     646:	0e 94 0e 02 	call	0x41c	; 0x41c <nRF24L01_write_register>
     64a:	be 01       	movw	r22, r28
     64c:	6e 5f       	subi	r22, 0xFE	; 254
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	c7 01       	movw	r24, r14
     652:	0e 94 bd 01 	call	0x37a	; 0x37a <copy_address>
     656:	25 e0       	ldi	r18, 0x05	; 5
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	ae 01       	movw	r20, r28
     65c:	4e 5f       	subi	r20, 0xFE	; 254
     65e:	5f 4f       	sbci	r21, 0xFF	; 255
     660:	6a e0       	ldi	r22, 0x0A	; 10
     662:	c8 01       	movw	r24, r16
     664:	0e 94 0e 02 	call	0x41c	; 0x41c <nRF24L01_write_register>
     668:	26 96       	adiw	r28, 0x06	; 6
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	08 95       	ret

00000682 <nRF24L01_transmit_success>:
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	1f 92       	push	r1
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	8c 01       	movw	r16, r24
     696:	dc 01       	movw	r26, r24
     698:	13 96       	adiw	r26, 0x03	; 3
     69a:	ed 91       	ld	r30, X+
     69c:	fc 91       	ld	r31, X
     69e:	14 97       	sbiw	r26, 0x04	; 4
     6a0:	20 81       	ld	r18, Z
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	15 96       	adiw	r26, 0x05	; 5
     6a8:	0c 90       	ld	r0, X
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <nRF24L01_transmit_success+0x2e>
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	0a 94       	dec	r0
     6b2:	e2 f7       	brpl	.-8      	; 0x6ac <nRF24L01_transmit_success+0x2a>
     6b4:	80 95       	com	r24
     6b6:	82 23       	and	r24, r18
     6b8:	80 83       	st	Z, r24
     6ba:	87 e4       	ldi	r24, 0x47	; 71
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
     6c2:	c8 01       	movw	r24, r16
     6c4:	0e 94 1d 02 	call	0x43a	; 0x43a <nRF24L01_update_status>
     6c8:	f8 01       	movw	r30, r16
     6ca:	87 85       	ldd	r24, Z+15	; 0x0f
     6cc:	85 fd       	sbrc	r24, 5
     6ce:	09 c0       	rjmp	.+18     	; 0x6e2 <nRF24L01_transmit_success+0x60>
     6d0:	84 fd       	sbrc	r24, 4
     6d2:	0a c0       	rjmp	.+20     	; 0x6e8 <nRF24L01_transmit_success+0x66>
     6d4:	0f 2e       	mov	r0, r31
     6d6:	fe ef       	ldi	r31, 0xFE	; 254
     6d8:	ef 2e       	mov	r14, r31
     6da:	ff 24       	eor	r15, r15
     6dc:	fa 94       	dec	r15
     6de:	f0 2d       	mov	r31, r0
     6e0:	06 c0       	rjmp	.+12     	; 0x6ee <nRF24L01_transmit_success+0x6c>
     6e2:	e1 2c       	mov	r14, r1
     6e4:	f1 2c       	mov	r15, r1
     6e6:	03 c0       	rjmp	.+6      	; 0x6ee <nRF24L01_transmit_success+0x6c>
     6e8:	ee 24       	eor	r14, r14
     6ea:	ea 94       	dec	r14
     6ec:	fe 2c       	mov	r15, r14
     6ee:	c8 01       	movw	r24, r16
     6f0:	0e 94 3b 02 	call	0x476	; 0x476 <nRF24L01_clear_transmit_interrupts>
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	ae 01       	movw	r20, r28
     6fa:	4f 5f       	subi	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	c8 01       	movw	r24, r16
     702:	0e 94 12 02 	call	0x424	; 0x424 <nRF24L01_read_register>
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	81 60       	ori	r24, 0x01	; 1
     70a:	89 83       	std	Y+1, r24	; 0x01
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	ae 01       	movw	r20, r28
     712:	4f 5f       	subi	r20, 0xFF	; 255
     714:	5f 4f       	sbci	r21, 0xFF	; 255
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	c8 01       	movw	r24, r16
     71a:	0e 94 0e 02 	call	0x41c	; 0x41c <nRF24L01_write_register>
     71e:	c7 01       	movw	r24, r14
     720:	0f 90       	pop	r0
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	ff 90       	pop	r15
     72c:	ef 90       	pop	r14
     72e:	08 95       	ret

00000730 <serial_putch>:
	serial_write("\n\r");
	
}

void serial_putch(unsigned char value){
	UDR0 = value;
     730:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer*/
     734:	e0 ec       	ldi	r30, 0xC0	; 192
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
     73a:	85 ff       	sbrs	r24, 5
     73c:	fd cf       	rjmp	.-6      	; 0x738 <serial_putch+0x8>
	
}
     73e:	08 95       	ret

00000740 <start_msg>:
}




void start_msg(){
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
	
	serial_writeln("Welcome to atmega328P");
     744:	87 e7       	ldi	r24, 0x77	; 119
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
	serial_write("Running onboard-diagnostics");
     74c:	8d e8       	ldi	r24, 0x8D	; 141
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <serial_write>
     754:	ca e0       	ldi	r28, 0x0A	; 10
     756:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (int i = 0; i<10; i++){
		serial_putch('.');
     758:	8e e2       	ldi	r24, 0x2E	; 46
     75a:	0e 94 98 03 	call	0x730	; 0x730 <serial_putch>
     75e:	2f ef       	ldi	r18, 0xFF	; 255
     760:	83 ec       	ldi	r24, 0xC3	; 195
     762:	99 e0       	ldi	r25, 0x09	; 9
     764:	21 50       	subi	r18, 0x01	; 1
     766:	80 40       	sbci	r24, 0x00	; 0
     768:	90 40       	sbci	r25, 0x00	; 0
     76a:	e1 f7       	brne	.-8      	; 0x764 <start_msg+0x24>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <start_msg+0x2e>
     76e:	00 00       	nop
     770:	21 97       	sbiw	r28, 0x01	; 1
void start_msg(){
	
	serial_writeln("Welcome to atmega328P");
	serial_write("Running onboard-diagnostics");
	
	for (int i = 0; i<10; i++){
     772:	91 f7       	brne	.-28     	; 0x758 <start_msg+0x18>
		serial_putch('.');
		_delay_ms(400);
	}
	serial_writeln("");
     774:	8c e2       	ldi	r24, 0x2C	; 44
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
	
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <binary>:
	UDR0 = value;
	while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer*/
	
}

void binary(uint8_t value){
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	29 97       	sbiw	r28, 0x09	; 9
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	fe 01       	movw	r30, r28
     798:	31 96       	adiw	r30, 0x01	; 1
     79a:	9e 01       	movw	r18, r28
     79c:	27 5f       	subi	r18, 0xF7	; 247
     79e:	3f 4f       	sbci	r19, 0xFF	; 255
		
		if (value%2){
			bin[i] = '1';
		}
		else{
			bin[i] = '0';
     7a0:	40 e3       	ldi	r20, 0x30	; 48
	unsigned char bin[9] ;
	uint8_t i = 0;
	for (i = 0; i < 8 ; i++){
		
		if (value%2){
			bin[i] = '1';
     7a2:	91 e3       	ldi	r25, 0x31	; 49
	
	unsigned char bin[9] ;
	uint8_t i = 0;
	for (i = 0; i < 8 ; i++){
		
		if (value%2){
     7a4:	80 ff       	sbrs	r24, 0
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <binary+0x2a>
			bin[i] = '1';
     7a8:	90 83       	st	Z, r25
     7aa:	01 c0       	rjmp	.+2      	; 0x7ae <binary+0x2c>
		}
		else{
			bin[i] = '0';
     7ac:	40 83       	st	Z, r20
			
		}
		value = value / 2;
     7ae:	86 95       	lsr	r24
     7b0:	31 96       	adiw	r30, 0x01	; 1

void binary(uint8_t value){
	
	unsigned char bin[9] ;
	uint8_t i = 0;
	for (i = 0; i < 8 ; i++){
     7b2:	e2 17       	cp	r30, r18
     7b4:	f3 07       	cpc	r31, r19
     7b6:	b1 f7       	brne	.-20     	; 0x7a4 <binary+0x22>
			bin[i] = '0';
			
		}
		value = value / 2;
	}
	strrev(bin);
     7b8:	ce 01       	movw	r24, r28
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	0e 94 20 08 	call	0x1040	; 0x1040 <strrev>
	serial_writeln(bin);
     7c0:	ce 01       	movw	r24, r28
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
	
}
     7c8:	29 96       	adiw	r28, 0x09	; 9
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <show_register_val>:

void show_register_val(uint8_t reg,char name[]){
     7da:	cf 93       	push	r28
     7dc:	c8 2f       	mov	r28, r24
     7de:	cb 01       	movw	r24, r22
	serial_write(name);
     7e0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <serial_write>
	binary(reg);
     7e4:	8c 2f       	mov	r24, r28
     7e6:	0e 94 c1 03 	call	0x782	; 0x782 <binary>
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	1f 92       	push	r1
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	8c 01       	movw	r16, r24
	
	serial_writeln("Setting NRF24L01+ begin function...");
     802:	89 ea       	ldi	r24, 0xA9	; 169
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
     80a:	d8 01       	movw	r26, r16
     80c:	ed 91       	ld	r30, X+
     80e:	fc 91       	ld	r31, X
     810:	11 97       	sbiw	r26, 0x01	; 1
     812:	22 91       	ld	r18, -Z
     814:	ee 24       	eor	r14, r14
     816:	e3 94       	inc	r14
     818:	f1 2c       	mov	r15, r1
     81a:	c7 01       	movw	r24, r14
     81c:	12 96       	adiw	r26, 0x02	; 2
     81e:	0c 90       	ld	r0, X
     820:	12 97       	sbiw	r26, 0x02	; 2
     822:	02 c0       	rjmp	.+4      	; 0x828 <nRF24L01_begin+0x3a>
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	0a 94       	dec	r0
     82a:	e2 f7       	brpl	.-8      	; 0x824 <nRF24L01_begin+0x36>
     82c:	82 2b       	or	r24, r18
     82e:	80 83       	st	Z, r24
     830:	13 96       	adiw	r26, 0x03	; 3
     832:	ed 91       	ld	r30, X+
     834:	fc 91       	ld	r31, X
     836:	14 97       	sbiw	r26, 0x04	; 4
     838:	22 91       	ld	r18, -Z
     83a:	c7 01       	movw	r24, r14
     83c:	15 96       	adiw	r26, 0x05	; 5
     83e:	0c 90       	ld	r0, X
     840:	15 97       	sbiw	r26, 0x05	; 5
     842:	02 c0       	rjmp	.+4      	; 0x848 <nRF24L01_begin+0x5a>
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	0a 94       	dec	r0
     84a:	e2 f7       	brpl	.-8      	; 0x844 <nRF24L01_begin+0x56>
     84c:	82 2b       	or	r24, r18
     84e:	80 83       	st	Z, r24
     850:	ed 91       	ld	r30, X+
     852:	fc 91       	ld	r31, X
     854:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
     856:	20 81       	ld	r18, Z
     858:	c7 01       	movw	r24, r14
     85a:	12 96       	adiw	r26, 0x02	; 2
     85c:	0c 90       	ld	r0, X
     85e:	12 97       	sbiw	r26, 0x02	; 2
     860:	02 c0       	rjmp	.+4      	; 0x866 <nRF24L01_begin+0x78>
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	0a 94       	dec	r0
     868:	e2 f7       	brpl	.-8      	; 0x862 <nRF24L01_begin+0x74>
     86a:	82 2b       	or	r24, r18
     86c:	80 83       	st	Z, r24
     86e:	13 96       	adiw	r26, 0x03	; 3
     870:	ed 91       	ld	r30, X+
     872:	fc 91       	ld	r31, X
     874:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
     876:	90 81       	ld	r25, Z
     878:	97 01       	movw	r18, r14
     87a:	15 96       	adiw	r26, 0x05	; 5
     87c:	0c 90       	ld	r0, X
     87e:	02 c0       	rjmp	.+4      	; 0x884 <nRF24L01_begin+0x96>
     880:	22 0f       	add	r18, r18
     882:	33 1f       	adc	r19, r19
     884:	0a 94       	dec	r0
     886:	e2 f7       	brpl	.-8      	; 0x880 <nRF24L01_begin+0x92>
     888:	82 2f       	mov	r24, r18
     88a:	80 95       	com	r24
     88c:	89 23       	and	r24, r25
     88e:	80 83       	st	Z, r24
    set_as_output(rf->ss);
    set_as_output(rf->ce);

    set_high(rf->ss);
    set_low(rf->ce);
	serial_writeln("CE LOW");
     890:	87 e4       	ldi	r24, 0x47	; 71
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
	
	serial_writeln("Initiating SPI comm...");
     898:	8d ec       	ldi	r24, 0xCD	; 205
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
    *pin.port &= ~_BV(pin.pin);
}

static void spi_init(nRF24L01 *rf) {
    // set as master
    SPCR |= _BV(MSTR);
     8a0:	8c b5       	in	r24, 0x2c	; 44
     8a2:	80 61       	ori	r24, 0x10	; 16
     8a4:	8c bd       	out	0x2c, r24	; 44
    // enable SPI
    SPCR |= _BV(SPE);
     8a6:	8c b5       	in	r24, 0x2c	; 44
     8a8:	80 64       	ori	r24, 0x40	; 64
     8aa:	8c bd       	out	0x2c, r24	; 44
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
     8ac:	d8 01       	movw	r26, r16
     8ae:	16 96       	adiw	r26, 0x06	; 6
     8b0:	ed 91       	ld	r30, X+
     8b2:	fc 91       	ld	r31, X
     8b4:	17 97       	sbiw	r26, 0x07	; 7
     8b6:	22 91       	ld	r18, -Z
     8b8:	c7 01       	movw	r24, r14
     8ba:	18 96       	adiw	r26, 0x08	; 8
     8bc:	0c 90       	ld	r0, X
     8be:	18 97       	sbiw	r26, 0x08	; 8
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <nRF24L01_begin+0xd8>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	0a 94       	dec	r0
     8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <nRF24L01_begin+0xd4>
     8ca:	82 2b       	or	r24, r18
     8cc:	80 83       	st	Z, r24
     8ce:	19 96       	adiw	r26, 0x09	; 9
     8d0:	ed 91       	ld	r30, X+
     8d2:	fc 91       	ld	r31, X
     8d4:	1a 97       	sbiw	r26, 0x0a	; 10
     8d6:	22 91       	ld	r18, -Z
     8d8:	c7 01       	movw	r24, r14
     8da:	1b 96       	adiw	r26, 0x0b	; 11
     8dc:	0c 90       	ld	r0, X
     8de:	1b 97       	sbiw	r26, 0x0b	; 11
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <nRF24L01_begin+0xf8>
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	0a 94       	dec	r0
     8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <nRF24L01_begin+0xf4>
     8ea:	82 2b       	or	r24, r18
     8ec:	80 83       	st	Z, r24
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
     8ee:	1c 96       	adiw	r26, 0x0c	; 12
     8f0:	ed 91       	ld	r30, X+
     8f2:	fc 91       	ld	r31, X
     8f4:	1d 97       	sbiw	r26, 0x0d	; 13
     8f6:	82 91       	ld	r24, -Z
     8f8:	1e 96       	adiw	r26, 0x0e	; 14
     8fa:	0c 90       	ld	r0, X
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0x3>
     8fe:	ee 0c       	add	r14, r14
     900:	ff 1c       	adc	r15, r15
     902:	0a 94       	dec	r0
     904:	e2 f7       	brpl	.-8      	; 0x8fe <nRF24L01_begin+0x110>
     906:	e0 94       	com	r14
     908:	e8 22       	and	r14, r24
     90a:	e0 82       	st	Z, r14
    // MISO pin automatically overrides to input
    set_as_output(rf->sck);
    set_as_output(rf->mosi);
    set_as_input(rf->miso);
    // SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
    SPCR &= ~_BV(CPOL);
     90c:	8c b5       	in	r24, 0x2c	; 44
     90e:	87 7f       	andi	r24, 0xF7	; 247
     910:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(CPHA);
     912:	8c b5       	in	r24, 0x2c	; 44
     914:	8b 7f       	andi	r24, 0xFB	; 251
     916:	8c bd       	out	0x2c, r24	; 44
    // Clock 2X speed
    SPCR &= ~_BV(SPR0);
     918:	8c b5       	in	r24, 0x2c	; 44
     91a:	8e 7f       	andi	r24, 0xFE	; 254
     91c:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(SPR1);
     91e:	8c b5       	in	r24, 0x2c	; 44
     920:	8d 7f       	andi	r24, 0xFD	; 253
     922:	8c bd       	out	0x2c, r24	; 44
    SPSR |= _BV(SPI2X);
     924:	8d b5       	in	r24, 0x2d	; 45
     926:	81 60       	ori	r24, 0x01	; 1
     928:	8d bd       	out	0x2d, r24	; 45
    // most significant first (MSB)
    SPCR &= ~_BV(DORD);
     92a:	8c b5       	in	r24, 0x2c	; 44
     92c:	8f 7d       	andi	r24, 0xDF	; 223
     92e:	8c bd       	out	0x2c, r24	; 44
	serial_writeln("CE LOW");
	
	serial_writeln("Initiating SPI comm...");
    spi_init(rf);

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	62 ee       	ldi	r22, 0xE2	; 226
     93a:	c8 01       	movw	r24, r16
     93c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	61 ee       	ldi	r22, 0xE1	; 225
     94a:	c8 01       	movw	r24, r16
     94c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
     950:	c8 01       	movw	r24, r16
     952:	0e 94 28 02 	call	0x450	; 0x450 <nRF24L01_clear_interrupts>

    uint8_t data;
    data = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
     956:	8f e0       	ldi	r24, 0x0F	; 15
     958:	89 83       	std	Y+1, r24	; 0x01
	
	serial_writeln("Writing CONFIG register in RX..");
     95a:	84 ee       	ldi	r24, 0xE4	; 228
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
     962:	bf ef       	ldi	r27, 0xFF	; 255
     964:	21 ee       	ldi	r18, 0xE1	; 225
     966:	84 e0       	ldi	r24, 0x04	; 4
     968:	b1 50       	subi	r27, 0x01	; 1
     96a:	20 40       	sbci	r18, 0x00	; 0
     96c:	80 40       	sbci	r24, 0x00	; 0
     96e:	e1 f7       	brne	.-8      	; 0x968 <__stack+0x69>
     970:	00 c0       	rjmp	.+0      	; 0x972 <__stack+0x73>
     972:	00 00       	nop
	_delay_ms(200);
	
    nRF24L01_write_register(rf, CONFIG, &data, 1);
     974:	21 e0       	ldi	r18, 0x01	; 1
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	ae 01       	movw	r20, r28
     97a:	4f 5f       	subi	r20, 0xFF	; 255
     97c:	5f 4f       	sbci	r21, 0xFF	; 255
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	c8 01       	movw	r24, r16
     982:	0e 94 0e 02 	call	0x41c	; 0x41c <nRF24L01_write_register>
	
	
	
	status = nRF24L01_read_register(rf, CONFIG, &temp , 1);
     986:	21 e0       	ldi	r18, 0x01	; 1
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e1       	ldi	r20, 0x10	; 16
     98c:	54 e0       	ldi	r21, 0x04	; 4
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	c8 01       	movw	r24, r16
     992:	0e 94 12 02 	call	0x424	; 0x424 <nRF24L01_read_register>
     996:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <status>
	show_register_val(temp,"CONFIG:  ");
     99a:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <temp>
     99e:	64 e0       	ldi	r22, 0x04	; 4
     9a0:	72 e0       	ldi	r23, 0x02	; 2
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 ed 03 	call	0x7da	; 0x7da <show_register_val>
	show_register_val(status,"STATUS:  ");
     9a8:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <status>
     9ac:	6e e0       	ldi	r22, 0x0E	; 14
     9ae:	72 e0       	ldi	r23, 0x02	; 2
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 ed 03 	call	0x7da	; 0x7da <show_register_val>
	serial_writeln("------------------\n\r");
     9b6:	88 e1       	ldi	r24, 0x18	; 24
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
     9be:	9f ef       	ldi	r25, 0xFF	; 255
     9c0:	a4 e3       	ldi	r26, 0x34	; 52
     9c2:	bc e0       	ldi	r27, 0x0C	; 12
     9c4:	91 50       	subi	r25, 0x01	; 1
     9c6:	a0 40       	sbci	r26, 0x00	; 0
     9c8:	b0 40       	sbci	r27, 0x00	; 0
     9ca:	e1 f7       	brne	.-8      	; 0x9c4 <__stack+0xc5>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <__stack+0xcf>
     9ce:	00 00       	nop
	_delay_ms(500);
	
	
	serial_writeln("Going ahead....");
     9d0:	8d e2       	ldi	r24, 0x2D	; 45
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
	
    // enable Auto Acknowlegde on all pipes
    data = _BV(ENAA_P0) | _BV(ENAA_P1) | _BV(ENAA_P2)
     9d8:	0f 2e       	mov	r0, r31
     9da:	ff e3       	ldi	r31, 0x3F	; 63
     9dc:	ff 2e       	mov	r15, r31
     9de:	f0 2d       	mov	r31, r0
     9e0:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(ENAA_P3) | _BV(ENAA_P4) | _BV(ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	ae 01       	movw	r20, r28
     9e8:	4f 5f       	subi	r20, 0xFF	; 255
     9ea:	5f 4f       	sbci	r21, 0xFF	; 255
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	c8 01       	movw	r24, r16
     9f0:	0e 94 0e 02 	call	0x41c	; 0x41c <nRF24L01_write_register>
	
	serial_writeln("Enabling auto-acknowledgment...");
     9f4:	8d e3       	ldi	r24, 0x3D	; 61
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
	status = nRF24L01_read_register(rf, EN_AA, &temp , 1);
     9fc:	21 e0       	ldi	r18, 0x01	; 1
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e1       	ldi	r20, 0x10	; 16
     a02:	54 e0       	ldi	r21, 0x04	; 4
     a04:	61 e0       	ldi	r22, 0x01	; 1
     a06:	c8 01       	movw	r24, r16
     a08:	0e 94 12 02 	call	0x424	; 0x424 <nRF24L01_read_register>
     a0c:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <status>
	show_register_val(temp,"ENAA:  ");
     a10:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <temp>
     a14:	6d e5       	ldi	r22, 0x5D	; 93
     a16:	72 e0       	ldi	r23, 0x02	; 2
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 ed 03 	call	0x7da	; 0x7da <show_register_val>
	show_register_val(status,"STATUS:  ");
     a1e:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <status>
     a22:	6e e0       	ldi	r22, 0x0E	; 14
     a24:	72 e0       	ldi	r23, 0x02	; 2
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 ed 03 	call	0x7da	; 0x7da <show_register_val>
	serial_writeln("------------------\n\r");
     a2c:	88 e1       	ldi	r24, 0x18	; 24
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
     a34:	2f ef       	ldi	r18, 0xFF	; 255
     a36:	84 e3       	ldi	r24, 0x34	; 52
     a38:	9c e0       	ldi	r25, 0x0C	; 12
     a3a:	21 50       	subi	r18, 0x01	; 1
     a3c:	80 40       	sbci	r24, 0x00	; 0
     a3e:	90 40       	sbci	r25, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <__stack+0x13b>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <__stack+0x145>
     a44:	00 00       	nop
	_delay_ms(500);
	
	
	
    // enable Dynamic Payload on al pipes
    data = _BV(DPL_P0) | _BV(DPL_P1) | _BV(DPL_P2)
     a46:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(DPL_P3) | _BV(DPL_P4) | _BV(DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
     a48:	21 e0       	ldi	r18, 0x01	; 1
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	ae 01       	movw	r20, r28
     a4e:	4f 5f       	subi	r20, 0xFF	; 255
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	6c e1       	ldi	r22, 0x1C	; 28
     a54:	c8 01       	movw	r24, r16
     a56:	0e 94 0e 02 	call	0x41c	; 0x41c <nRF24L01_write_register>
	
	serial_writeln("Enabling dynamic-payload length...");
     a5a:	85 e6       	ldi	r24, 0x65	; 101
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
	status = nRF24L01_read_register(rf, DYNPD, &temp , 1);
     a62:	21 e0       	ldi	r18, 0x01	; 1
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e1       	ldi	r20, 0x10	; 16
     a68:	54 e0       	ldi	r21, 0x04	; 4
     a6a:	6c e1       	ldi	r22, 0x1C	; 28
     a6c:	c8 01       	movw	r24, r16
     a6e:	0e 94 12 02 	call	0x424	; 0x424 <nRF24L01_read_register>
     a72:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <status>
	show_register_val(temp,"DYNPD:  ");
     a76:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <temp>
     a7a:	68 e8       	ldi	r22, 0x88	; 136
     a7c:	72 e0       	ldi	r23, 0x02	; 2
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 ed 03 	call	0x7da	; 0x7da <show_register_val>
	show_register_val(status,"STATUS:  ");
     a84:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <status>
     a88:	6e e0       	ldi	r22, 0x0E	; 14
     a8a:	72 e0       	ldi	r23, 0x02	; 2
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 ed 03 	call	0x7da	; 0x7da <show_register_val>
	serial_writeln("------------------\n\r");
     a92:	88 e1       	ldi	r24, 0x18	; 24
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
     a9a:	af ef       	ldi	r26, 0xFF	; 255
     a9c:	b4 e3       	ldi	r27, 0x34	; 52
     a9e:	2c e0       	ldi	r18, 0x0C	; 12
     aa0:	a1 50       	subi	r26, 0x01	; 1
     aa2:	b0 40       	sbci	r27, 0x00	; 0
     aa4:	20 40       	sbci	r18, 0x00	; 0
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <__stack+0x1a1>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <__stack+0x1ab>
     aaa:	00 00       	nop
	
	
	

    // enable Dynamic Payload (global)
    data = _BV(EN_DPL);
     aac:	84 e0       	ldi	r24, 0x04	; 4
     aae:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
     ab0:	21 e0       	ldi	r18, 0x01	; 1
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	ae 01       	movw	r20, r28
     ab6:	4f 5f       	subi	r20, 0xFF	; 255
     ab8:	5f 4f       	sbci	r21, 0xFF	; 255
     aba:	6d e1       	ldi	r22, 0x1D	; 29
     abc:	c8 01       	movw	r24, r16
     abe:	0e 94 0e 02 	call	0x41c	; 0x41c <nRF24L01_write_register>
	
	serial_writeln("Enabling GLOBAL-DYN length...");
     ac2:	81 e9       	ldi	r24, 0x91	; 145
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
	status = nRF24L01_read_register(rf, FEATURE, &temp , 1);
     aca:	21 e0       	ldi	r18, 0x01	; 1
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e1       	ldi	r20, 0x10	; 16
     ad0:	54 e0       	ldi	r21, 0x04	; 4
     ad2:	6d e1       	ldi	r22, 0x1D	; 29
     ad4:	c8 01       	movw	r24, r16
     ad6:	0e 94 12 02 	call	0x424	; 0x424 <nRF24L01_read_register>
     ada:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <status>
	show_register_val(temp,"FEATURE:  ");
     ade:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <temp>
     ae2:	6f ea       	ldi	r22, 0xAF	; 175
     ae4:	72 e0       	ldi	r23, 0x02	; 2
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 ed 03 	call	0x7da	; 0x7da <show_register_val>
	show_register_val(status,"STATUS:  ");
     aec:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <status>
     af0:	6e e0       	ldi	r22, 0x0E	; 14
     af2:	72 e0       	ldi	r23, 0x02	; 2
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 ed 03 	call	0x7da	; 0x7da <show_register_val>
	serial_writeln("------------------\n\r");
     afa:	88 e1       	ldi	r24, 0x18	; 24
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	94 e3       	ldi	r25, 0x34	; 52
     b06:	ac e0       	ldi	r26, 0x0C	; 12
     b08:	81 50       	subi	r24, 0x01	; 1
     b0a:	90 40       	sbci	r25, 0x00	; 0
     b0c:	a0 40       	sbci	r26, 0x00	; 0
     b0e:	e1 f7       	brne	.-8      	; 0xb08 <__stack+0x209>
     b10:	00 c0       	rjmp	.+0      	; 0xb12 <__stack+0x213>
     b12:	00 00       	nop
	_delay_ms(500);

    // disable all rx addresses
    data = 0;
     b14:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
     b16:	21 e0       	ldi	r18, 0x01	; 1
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	ae 01       	movw	r20, r28
     b1c:	4f 5f       	subi	r20, 0xFF	; 255
     b1e:	5f 4f       	sbci	r21, 0xFF	; 255
     b20:	62 e0       	ldi	r22, 0x02	; 2
     b22:	c8 01       	movw	r24, r16
     b24:	0e 94 0e 02 	call	0x41c	; 0x41c <nRF24L01_write_register>
	
	serial_writeln("Disabling all RX_ADDRESS...");
     b28:	8a eb       	ldi	r24, 0xBA	; 186
     b2a:	92 e0       	ldi	r25, 0x02	; 2
     b2c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
	status = nRF24L01_read_register(rf, EN_RXADDR, &temp , 1);
     b30:	21 e0       	ldi	r18, 0x01	; 1
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	40 e1       	ldi	r20, 0x10	; 16
     b36:	54 e0       	ldi	r21, 0x04	; 4
     b38:	62 e0       	ldi	r22, 0x02	; 2
     b3a:	c8 01       	movw	r24, r16
     b3c:	0e 94 12 02 	call	0x424	; 0x424 <nRF24L01_read_register>
     b40:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <status>
	show_register_val(temp,"FEATURE:  ");
     b44:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <temp>
     b48:	6f ea       	ldi	r22, 0xAF	; 175
     b4a:	72 e0       	ldi	r23, 0x02	; 2
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 ed 03 	call	0x7da	; 0x7da <show_register_val>
	show_register_val(status,"STATUS:  ");
     b52:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <status>
     b56:	6e e0       	ldi	r22, 0x0E	; 14
     b58:	72 e0       	ldi	r23, 0x02	; 2
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 ed 03 	call	0x7da	; 0x7da <show_register_val>
	serial_writeln("------------------\n\r");
     b60:	88 e1       	ldi	r24, 0x18	; 24
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	0e 94 79 02 	call	0x4f2	; 0x4f2 <serial_writeln>
     b68:	bf ef       	ldi	r27, 0xFF	; 255
     b6a:	24 e3       	ldi	r18, 0x34	; 52
     b6c:	8c e0       	ldi	r24, 0x0C	; 12
     b6e:	b1 50       	subi	r27, 0x01	; 1
     b70:	20 40       	sbci	r18, 0x00	; 0
     b72:	80 40       	sbci	r24, 0x00	; 0
     b74:	e1 f7       	brne	.-8      	; 0xb6e <__stack+0x26f>
     b76:	00 c0       	rjmp	.+0      	; 0xb78 <__stack+0x279>
     b78:	00 00       	nop
	_delay_ms(500);
}
     b7a:	0f 90       	pop	r0
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	08 95       	ret

00000b8a <__divsf3>:
     b8a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__divsf3x>
     b8e:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_round>
     b92:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fp_pscB>
     b96:	58 f0       	brcs	.+22     	; 0xbae <__divsf3+0x24>
     b98:	0e 94 ac 06 	call	0xd58	; 0xd58 <__fp_pscA>
     b9c:	40 f0       	brcs	.+16     	; 0xbae <__divsf3+0x24>
     b9e:	29 f4       	brne	.+10     	; 0xbaa <__divsf3+0x20>
     ba0:	5f 3f       	cpi	r21, 0xFF	; 255
     ba2:	29 f0       	breq	.+10     	; 0xbae <__divsf3+0x24>
     ba4:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_inf>
     ba8:	51 11       	cpse	r21, r1
     baa:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_szero>
     bae:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_nan>

00000bb2 <__divsf3x>:
     bb2:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fp_split3>
     bb6:	68 f3       	brcs	.-38     	; 0xb92 <__divsf3+0x8>

00000bb8 <__divsf3_pse>:
     bb8:	99 23       	and	r25, r25
     bba:	b1 f3       	breq	.-20     	; 0xba8 <__divsf3+0x1e>
     bbc:	55 23       	and	r21, r21
     bbe:	91 f3       	breq	.-28     	; 0xba4 <__divsf3+0x1a>
     bc0:	95 1b       	sub	r25, r21
     bc2:	55 0b       	sbc	r21, r21
     bc4:	bb 27       	eor	r27, r27
     bc6:	aa 27       	eor	r26, r26
     bc8:	62 17       	cp	r22, r18
     bca:	73 07       	cpc	r23, r19
     bcc:	84 07       	cpc	r24, r20
     bce:	38 f0       	brcs	.+14     	; 0xbde <__divsf3_pse+0x26>
     bd0:	9f 5f       	subi	r25, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	22 0f       	add	r18, r18
     bd6:	33 1f       	adc	r19, r19
     bd8:	44 1f       	adc	r20, r20
     bda:	aa 1f       	adc	r26, r26
     bdc:	a9 f3       	breq	.-22     	; 0xbc8 <__divsf3_pse+0x10>
     bde:	35 d0       	rcall	.+106    	; 0xc4a <__divsf3_pse+0x92>
     be0:	0e 2e       	mov	r0, r30
     be2:	3a f0       	brmi	.+14     	; 0xbf2 <__divsf3_pse+0x3a>
     be4:	e0 e8       	ldi	r30, 0x80	; 128
     be6:	32 d0       	rcall	.+100    	; 0xc4c <__divsf3_pse+0x94>
     be8:	91 50       	subi	r25, 0x01	; 1
     bea:	50 40       	sbci	r21, 0x00	; 0
     bec:	e6 95       	lsr	r30
     bee:	00 1c       	adc	r0, r0
     bf0:	ca f7       	brpl	.-14     	; 0xbe4 <__divsf3_pse+0x2c>
     bf2:	2b d0       	rcall	.+86     	; 0xc4a <__divsf3_pse+0x92>
     bf4:	fe 2f       	mov	r31, r30
     bf6:	29 d0       	rcall	.+82     	; 0xc4a <__divsf3_pse+0x92>
     bf8:	66 0f       	add	r22, r22
     bfa:	77 1f       	adc	r23, r23
     bfc:	88 1f       	adc	r24, r24
     bfe:	bb 1f       	adc	r27, r27
     c00:	26 17       	cp	r18, r22
     c02:	37 07       	cpc	r19, r23
     c04:	48 07       	cpc	r20, r24
     c06:	ab 07       	cpc	r26, r27
     c08:	b0 e8       	ldi	r27, 0x80	; 128
     c0a:	09 f0       	breq	.+2      	; 0xc0e <__divsf3_pse+0x56>
     c0c:	bb 0b       	sbc	r27, r27
     c0e:	80 2d       	mov	r24, r0
     c10:	bf 01       	movw	r22, r30
     c12:	ff 27       	eor	r31, r31
     c14:	93 58       	subi	r25, 0x83	; 131
     c16:	5f 4f       	sbci	r21, 0xFF	; 255
     c18:	3a f0       	brmi	.+14     	; 0xc28 <__divsf3_pse+0x70>
     c1a:	9e 3f       	cpi	r25, 0xFE	; 254
     c1c:	51 05       	cpc	r21, r1
     c1e:	78 f0       	brcs	.+30     	; 0xc3e <__divsf3_pse+0x86>
     c20:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_inf>
     c24:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_szero>
     c28:	5f 3f       	cpi	r21, 0xFF	; 255
     c2a:	e4 f3       	brlt	.-8      	; 0xc24 <__divsf3_pse+0x6c>
     c2c:	98 3e       	cpi	r25, 0xE8	; 232
     c2e:	d4 f3       	brlt	.-12     	; 0xc24 <__divsf3_pse+0x6c>
     c30:	86 95       	lsr	r24
     c32:	77 95       	ror	r23
     c34:	67 95       	ror	r22
     c36:	b7 95       	ror	r27
     c38:	f7 95       	ror	r31
     c3a:	9f 5f       	subi	r25, 0xFF	; 255
     c3c:	c9 f7       	brne	.-14     	; 0xc30 <__divsf3_pse+0x78>
     c3e:	88 0f       	add	r24, r24
     c40:	91 1d       	adc	r25, r1
     c42:	96 95       	lsr	r25
     c44:	87 95       	ror	r24
     c46:	97 f9       	bld	r25, 7
     c48:	08 95       	ret
     c4a:	e1 e0       	ldi	r30, 0x01	; 1
     c4c:	66 0f       	add	r22, r22
     c4e:	77 1f       	adc	r23, r23
     c50:	88 1f       	adc	r24, r24
     c52:	bb 1f       	adc	r27, r27
     c54:	62 17       	cp	r22, r18
     c56:	73 07       	cpc	r23, r19
     c58:	84 07       	cpc	r24, r20
     c5a:	ba 07       	cpc	r27, r26
     c5c:	20 f0       	brcs	.+8      	; 0xc66 <__divsf3_pse+0xae>
     c5e:	62 1b       	sub	r22, r18
     c60:	73 0b       	sbc	r23, r19
     c62:	84 0b       	sbc	r24, r20
     c64:	ba 0b       	sbc	r27, r26
     c66:	ee 1f       	adc	r30, r30
     c68:	88 f7       	brcc	.-30     	; 0xc4c <__divsf3_pse+0x94>
     c6a:	e0 95       	com	r30
     c6c:	08 95       	ret

00000c6e <__fixunssfsi>:
     c6e:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_splitA>
     c72:	88 f0       	brcs	.+34     	; 0xc96 <__fixunssfsi+0x28>
     c74:	9f 57       	subi	r25, 0x7F	; 127
     c76:	98 f0       	brcs	.+38     	; 0xc9e <__fixunssfsi+0x30>
     c78:	b9 2f       	mov	r27, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	b7 51       	subi	r27, 0x17	; 23
     c7e:	b0 f0       	brcs	.+44     	; 0xcac <__fixunssfsi+0x3e>
     c80:	e1 f0       	breq	.+56     	; 0xcba <__fixunssfsi+0x4c>
     c82:	66 0f       	add	r22, r22
     c84:	77 1f       	adc	r23, r23
     c86:	88 1f       	adc	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	1a f0       	brmi	.+6      	; 0xc92 <__fixunssfsi+0x24>
     c8c:	ba 95       	dec	r27
     c8e:	c9 f7       	brne	.-14     	; 0xc82 <__fixunssfsi+0x14>
     c90:	14 c0       	rjmp	.+40     	; 0xcba <__fixunssfsi+0x4c>
     c92:	b1 30       	cpi	r27, 0x01	; 1
     c94:	91 f0       	breq	.+36     	; 0xcba <__fixunssfsi+0x4c>
     c96:	0e 94 ed 06 	call	0xdda	; 0xdda <__fp_zero>
     c9a:	b1 e0       	ldi	r27, 0x01	; 1
     c9c:	08 95       	ret
     c9e:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__fp_zero>
     ca2:	67 2f       	mov	r22, r23
     ca4:	78 2f       	mov	r23, r24
     ca6:	88 27       	eor	r24, r24
     ca8:	b8 5f       	subi	r27, 0xF8	; 248
     caa:	39 f0       	breq	.+14     	; 0xcba <__fixunssfsi+0x4c>
     cac:	b9 3f       	cpi	r27, 0xF9	; 249
     cae:	cc f3       	brlt	.-14     	; 0xca2 <__fixunssfsi+0x34>
     cb0:	86 95       	lsr	r24
     cb2:	77 95       	ror	r23
     cb4:	67 95       	ror	r22
     cb6:	b3 95       	inc	r27
     cb8:	d9 f7       	brne	.-10     	; 0xcb0 <__fixunssfsi+0x42>
     cba:	3e f4       	brtc	.+14     	; 0xcca <__fixunssfsi+0x5c>
     cbc:	90 95       	com	r25
     cbe:	80 95       	com	r24
     cc0:	70 95       	com	r23
     cc2:	61 95       	neg	r22
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	8f 4f       	sbci	r24, 0xFF	; 255
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	08 95       	ret

00000ccc <__floatunsisf>:
     ccc:	e8 94       	clt
     cce:	09 c0       	rjmp	.+18     	; 0xce2 <__floatsisf+0x12>

00000cd0 <__floatsisf>:
     cd0:	97 fb       	bst	r25, 7
     cd2:	3e f4       	brtc	.+14     	; 0xce2 <__floatsisf+0x12>
     cd4:	90 95       	com	r25
     cd6:	80 95       	com	r24
     cd8:	70 95       	com	r23
     cda:	61 95       	neg	r22
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	8f 4f       	sbci	r24, 0xFF	; 255
     ce0:	9f 4f       	sbci	r25, 0xFF	; 255
     ce2:	99 23       	and	r25, r25
     ce4:	a9 f0       	breq	.+42     	; 0xd10 <__floatsisf+0x40>
     ce6:	f9 2f       	mov	r31, r25
     ce8:	96 e9       	ldi	r25, 0x96	; 150
     cea:	bb 27       	eor	r27, r27
     cec:	93 95       	inc	r25
     cee:	f6 95       	lsr	r31
     cf0:	87 95       	ror	r24
     cf2:	77 95       	ror	r23
     cf4:	67 95       	ror	r22
     cf6:	b7 95       	ror	r27
     cf8:	f1 11       	cpse	r31, r1
     cfa:	f8 cf       	rjmp	.-16     	; 0xcec <__floatsisf+0x1c>
     cfc:	fa f4       	brpl	.+62     	; 0xd3c <__floatsisf+0x6c>
     cfe:	bb 0f       	add	r27, r27
     d00:	11 f4       	brne	.+4      	; 0xd06 <__floatsisf+0x36>
     d02:	60 ff       	sbrs	r22, 0
     d04:	1b c0       	rjmp	.+54     	; 0xd3c <__floatsisf+0x6c>
     d06:	6f 5f       	subi	r22, 0xFF	; 255
     d08:	7f 4f       	sbci	r23, 0xFF	; 255
     d0a:	8f 4f       	sbci	r24, 0xFF	; 255
     d0c:	9f 4f       	sbci	r25, 0xFF	; 255
     d0e:	16 c0       	rjmp	.+44     	; 0xd3c <__floatsisf+0x6c>
     d10:	88 23       	and	r24, r24
     d12:	11 f0       	breq	.+4      	; 0xd18 <__floatsisf+0x48>
     d14:	96 e9       	ldi	r25, 0x96	; 150
     d16:	11 c0       	rjmp	.+34     	; 0xd3a <__floatsisf+0x6a>
     d18:	77 23       	and	r23, r23
     d1a:	21 f0       	breq	.+8      	; 0xd24 <__floatsisf+0x54>
     d1c:	9e e8       	ldi	r25, 0x8E	; 142
     d1e:	87 2f       	mov	r24, r23
     d20:	76 2f       	mov	r23, r22
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <__floatsisf+0x5e>
     d24:	66 23       	and	r22, r22
     d26:	71 f0       	breq	.+28     	; 0xd44 <__floatsisf+0x74>
     d28:	96 e8       	ldi	r25, 0x86	; 134
     d2a:	86 2f       	mov	r24, r22
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	2a f0       	brmi	.+10     	; 0xd3c <__floatsisf+0x6c>
     d32:	9a 95       	dec	r25
     d34:	66 0f       	add	r22, r22
     d36:	77 1f       	adc	r23, r23
     d38:	88 1f       	adc	r24, r24
     d3a:	da f7       	brpl	.-10     	; 0xd32 <__floatsisf+0x62>
     d3c:	88 0f       	add	r24, r24
     d3e:	96 95       	lsr	r25
     d40:	87 95       	ror	r24
     d42:	97 f9       	bld	r25, 7
     d44:	08 95       	ret

00000d46 <__fp_inf>:
     d46:	97 f9       	bld	r25, 7
     d48:	9f 67       	ori	r25, 0x7F	; 127
     d4a:	80 e8       	ldi	r24, 0x80	; 128
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	08 95       	ret

00000d52 <__fp_nan>:
     d52:	9f ef       	ldi	r25, 0xFF	; 255
     d54:	80 ec       	ldi	r24, 0xC0	; 192
     d56:	08 95       	ret

00000d58 <__fp_pscA>:
     d58:	00 24       	eor	r0, r0
     d5a:	0a 94       	dec	r0
     d5c:	16 16       	cp	r1, r22
     d5e:	17 06       	cpc	r1, r23
     d60:	18 06       	cpc	r1, r24
     d62:	09 06       	cpc	r0, r25
     d64:	08 95       	ret

00000d66 <__fp_pscB>:
     d66:	00 24       	eor	r0, r0
     d68:	0a 94       	dec	r0
     d6a:	12 16       	cp	r1, r18
     d6c:	13 06       	cpc	r1, r19
     d6e:	14 06       	cpc	r1, r20
     d70:	05 06       	cpc	r0, r21
     d72:	08 95       	ret

00000d74 <__fp_round>:
     d74:	09 2e       	mov	r0, r25
     d76:	03 94       	inc	r0
     d78:	00 0c       	add	r0, r0
     d7a:	11 f4       	brne	.+4      	; 0xd80 <__fp_round+0xc>
     d7c:	88 23       	and	r24, r24
     d7e:	52 f0       	brmi	.+20     	; 0xd94 <__fp_round+0x20>
     d80:	bb 0f       	add	r27, r27
     d82:	40 f4       	brcc	.+16     	; 0xd94 <__fp_round+0x20>
     d84:	bf 2b       	or	r27, r31
     d86:	11 f4       	brne	.+4      	; 0xd8c <__fp_round+0x18>
     d88:	60 ff       	sbrs	r22, 0
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <__fp_round+0x20>
     d8c:	6f 5f       	subi	r22, 0xFF	; 255
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	8f 4f       	sbci	r24, 0xFF	; 255
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	08 95       	ret

00000d96 <__fp_split3>:
     d96:	57 fd       	sbrc	r21, 7
     d98:	90 58       	subi	r25, 0x80	; 128
     d9a:	44 0f       	add	r20, r20
     d9c:	55 1f       	adc	r21, r21
     d9e:	59 f0       	breq	.+22     	; 0xdb6 <__fp_splitA+0x10>
     da0:	5f 3f       	cpi	r21, 0xFF	; 255
     da2:	71 f0       	breq	.+28     	; 0xdc0 <__fp_splitA+0x1a>
     da4:	47 95       	ror	r20

00000da6 <__fp_splitA>:
     da6:	88 0f       	add	r24, r24
     da8:	97 fb       	bst	r25, 7
     daa:	99 1f       	adc	r25, r25
     dac:	61 f0       	breq	.+24     	; 0xdc6 <__fp_splitA+0x20>
     dae:	9f 3f       	cpi	r25, 0xFF	; 255
     db0:	79 f0       	breq	.+30     	; 0xdd0 <__fp_splitA+0x2a>
     db2:	87 95       	ror	r24
     db4:	08 95       	ret
     db6:	12 16       	cp	r1, r18
     db8:	13 06       	cpc	r1, r19
     dba:	14 06       	cpc	r1, r20
     dbc:	55 1f       	adc	r21, r21
     dbe:	f2 cf       	rjmp	.-28     	; 0xda4 <__fp_split3+0xe>
     dc0:	46 95       	lsr	r20
     dc2:	f1 df       	rcall	.-30     	; 0xda6 <__fp_splitA>
     dc4:	08 c0       	rjmp	.+16     	; 0xdd6 <__fp_splitA+0x30>
     dc6:	16 16       	cp	r1, r22
     dc8:	17 06       	cpc	r1, r23
     dca:	18 06       	cpc	r1, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	f1 cf       	rjmp	.-30     	; 0xdb2 <__fp_splitA+0xc>
     dd0:	86 95       	lsr	r24
     dd2:	71 05       	cpc	r23, r1
     dd4:	61 05       	cpc	r22, r1
     dd6:	08 94       	sec
     dd8:	08 95       	ret

00000dda <__fp_zero>:
     dda:	e8 94       	clt

00000ddc <__fp_szero>:
     ddc:	bb 27       	eor	r27, r27
     dde:	66 27       	eor	r22, r22
     de0:	77 27       	eor	r23, r23
     de2:	cb 01       	movw	r24, r22
     de4:	97 f9       	bld	r25, 7
     de6:	08 95       	ret

00000de8 <malloc>:
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	82 30       	cpi	r24, 0x02	; 2
     df2:	91 05       	cpc	r25, r1
     df4:	10 f4       	brcc	.+4      	; 0xdfa <malloc+0x12>
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <__flp>
     dfe:	f0 91 15 04 	lds	r31, 0x0415	; 0x800415 <__flp+0x1>
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	a0 e0       	ldi	r26, 0x00	; 0
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	30 97       	sbiw	r30, 0x00	; 0
     e0c:	19 f1       	breq	.+70     	; 0xe54 <malloc+0x6c>
     e0e:	40 81       	ld	r20, Z
     e10:	51 81       	ldd	r21, Z+1	; 0x01
     e12:	02 81       	ldd	r16, Z+2	; 0x02
     e14:	13 81       	ldd	r17, Z+3	; 0x03
     e16:	48 17       	cp	r20, r24
     e18:	59 07       	cpc	r21, r25
     e1a:	c8 f0       	brcs	.+50     	; 0xe4e <malloc+0x66>
     e1c:	84 17       	cp	r24, r20
     e1e:	95 07       	cpc	r25, r21
     e20:	69 f4       	brne	.+26     	; 0xe3c <malloc+0x54>
     e22:	10 97       	sbiw	r26, 0x00	; 0
     e24:	31 f0       	breq	.+12     	; 0xe32 <malloc+0x4a>
     e26:	12 96       	adiw	r26, 0x02	; 2
     e28:	0c 93       	st	X, r16
     e2a:	12 97       	sbiw	r26, 0x02	; 2
     e2c:	13 96       	adiw	r26, 0x03	; 3
     e2e:	1c 93       	st	X, r17
     e30:	27 c0       	rjmp	.+78     	; 0xe80 <malloc+0x98>
     e32:	00 93 14 04 	sts	0x0414, r16	; 0x800414 <__flp>
     e36:	10 93 15 04 	sts	0x0415, r17	; 0x800415 <__flp+0x1>
     e3a:	22 c0       	rjmp	.+68     	; 0xe80 <malloc+0x98>
     e3c:	21 15       	cp	r18, r1
     e3e:	31 05       	cpc	r19, r1
     e40:	19 f0       	breq	.+6      	; 0xe48 <malloc+0x60>
     e42:	42 17       	cp	r20, r18
     e44:	53 07       	cpc	r21, r19
     e46:	18 f4       	brcc	.+6      	; 0xe4e <malloc+0x66>
     e48:	9a 01       	movw	r18, r20
     e4a:	bd 01       	movw	r22, r26
     e4c:	ef 01       	movw	r28, r30
     e4e:	df 01       	movw	r26, r30
     e50:	f8 01       	movw	r30, r16
     e52:	db cf       	rjmp	.-74     	; 0xe0a <malloc+0x22>
     e54:	21 15       	cp	r18, r1
     e56:	31 05       	cpc	r19, r1
     e58:	f9 f0       	breq	.+62     	; 0xe98 <malloc+0xb0>
     e5a:	28 1b       	sub	r18, r24
     e5c:	39 0b       	sbc	r19, r25
     e5e:	24 30       	cpi	r18, 0x04	; 4
     e60:	31 05       	cpc	r19, r1
     e62:	80 f4       	brcc	.+32     	; 0xe84 <malloc+0x9c>
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	61 15       	cp	r22, r1
     e6a:	71 05       	cpc	r23, r1
     e6c:	21 f0       	breq	.+8      	; 0xe76 <malloc+0x8e>
     e6e:	fb 01       	movw	r30, r22
     e70:	93 83       	std	Z+3, r25	; 0x03
     e72:	82 83       	std	Z+2, r24	; 0x02
     e74:	04 c0       	rjmp	.+8      	; 0xe7e <malloc+0x96>
     e76:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <__flp+0x1>
     e7a:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <__flp>
     e7e:	fe 01       	movw	r30, r28
     e80:	32 96       	adiw	r30, 0x02	; 2
     e82:	44 c0       	rjmp	.+136    	; 0xf0c <malloc+0x124>
     e84:	fe 01       	movw	r30, r28
     e86:	e2 0f       	add	r30, r18
     e88:	f3 1f       	adc	r31, r19
     e8a:	81 93       	st	Z+, r24
     e8c:	91 93       	st	Z+, r25
     e8e:	22 50       	subi	r18, 0x02	; 2
     e90:	31 09       	sbc	r19, r1
     e92:	39 83       	std	Y+1, r19	; 0x01
     e94:	28 83       	st	Y, r18
     e96:	3a c0       	rjmp	.+116    	; 0xf0c <malloc+0x124>
     e98:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <__brkval>
     e9c:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <__brkval+0x1>
     ea0:	23 2b       	or	r18, r19
     ea2:	41 f4       	brne	.+16     	; 0xeb4 <malloc+0xcc>
     ea4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     ea8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     eac:	30 93 13 04 	sts	0x0413, r19	; 0x800413 <__brkval+0x1>
     eb0:	20 93 12 04 	sts	0x0412, r18	; 0x800412 <__brkval>
     eb4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     eb8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     ebc:	21 15       	cp	r18, r1
     ebe:	31 05       	cpc	r19, r1
     ec0:	41 f4       	brne	.+16     	; 0xed2 <malloc+0xea>
     ec2:	2d b7       	in	r18, 0x3d	; 61
     ec4:	3e b7       	in	r19, 0x3e	; 62
     ec6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     eca:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     ece:	24 1b       	sub	r18, r20
     ed0:	35 0b       	sbc	r19, r21
     ed2:	e0 91 12 04 	lds	r30, 0x0412	; 0x800412 <__brkval>
     ed6:	f0 91 13 04 	lds	r31, 0x0413	; 0x800413 <__brkval+0x1>
     eda:	e2 17       	cp	r30, r18
     edc:	f3 07       	cpc	r31, r19
     ede:	a0 f4       	brcc	.+40     	; 0xf08 <malloc+0x120>
     ee0:	2e 1b       	sub	r18, r30
     ee2:	3f 0b       	sbc	r19, r31
     ee4:	28 17       	cp	r18, r24
     ee6:	39 07       	cpc	r19, r25
     ee8:	78 f0       	brcs	.+30     	; 0xf08 <malloc+0x120>
     eea:	ac 01       	movw	r20, r24
     eec:	4e 5f       	subi	r20, 0xFE	; 254
     eee:	5f 4f       	sbci	r21, 0xFF	; 255
     ef0:	24 17       	cp	r18, r20
     ef2:	35 07       	cpc	r19, r21
     ef4:	48 f0       	brcs	.+18     	; 0xf08 <malloc+0x120>
     ef6:	4e 0f       	add	r20, r30
     ef8:	5f 1f       	adc	r21, r31
     efa:	50 93 13 04 	sts	0x0413, r21	; 0x800413 <__brkval+0x1>
     efe:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <__brkval>
     f02:	81 93       	st	Z+, r24
     f04:	91 93       	st	Z+, r25
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <malloc+0x124>
     f08:	e0 e0       	ldi	r30, 0x00	; 0
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	cf 01       	movw	r24, r30
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	08 95       	ret

00000f18 <free>:
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	09 f4       	brne	.+2      	; 0xf22 <free+0xa>
     f20:	81 c0       	rjmp	.+258    	; 0x1024 <free+0x10c>
     f22:	fc 01       	movw	r30, r24
     f24:	32 97       	sbiw	r30, 0x02	; 2
     f26:	13 82       	std	Z+3, r1	; 0x03
     f28:	12 82       	std	Z+2, r1	; 0x02
     f2a:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <__flp>
     f2e:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <__flp+0x1>
     f32:	10 97       	sbiw	r26, 0x00	; 0
     f34:	81 f4       	brne	.+32     	; 0xf56 <free+0x3e>
     f36:	20 81       	ld	r18, Z
     f38:	31 81       	ldd	r19, Z+1	; 0x01
     f3a:	82 0f       	add	r24, r18
     f3c:	93 1f       	adc	r25, r19
     f3e:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <__brkval>
     f42:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <__brkval+0x1>
     f46:	28 17       	cp	r18, r24
     f48:	39 07       	cpc	r19, r25
     f4a:	51 f5       	brne	.+84     	; 0xfa0 <free+0x88>
     f4c:	f0 93 13 04 	sts	0x0413, r31	; 0x800413 <__brkval+0x1>
     f50:	e0 93 12 04 	sts	0x0412, r30	; 0x800412 <__brkval>
     f54:	67 c0       	rjmp	.+206    	; 0x1024 <free+0x10c>
     f56:	ed 01       	movw	r28, r26
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	ce 17       	cp	r28, r30
     f5e:	df 07       	cpc	r29, r31
     f60:	40 f4       	brcc	.+16     	; 0xf72 <free+0x5a>
     f62:	4a 81       	ldd	r20, Y+2	; 0x02
     f64:	5b 81       	ldd	r21, Y+3	; 0x03
     f66:	9e 01       	movw	r18, r28
     f68:	41 15       	cp	r20, r1
     f6a:	51 05       	cpc	r21, r1
     f6c:	f1 f0       	breq	.+60     	; 0xfaa <free+0x92>
     f6e:	ea 01       	movw	r28, r20
     f70:	f5 cf       	rjmp	.-22     	; 0xf5c <free+0x44>
     f72:	d3 83       	std	Z+3, r29	; 0x03
     f74:	c2 83       	std	Z+2, r28	; 0x02
     f76:	40 81       	ld	r20, Z
     f78:	51 81       	ldd	r21, Z+1	; 0x01
     f7a:	84 0f       	add	r24, r20
     f7c:	95 1f       	adc	r25, r21
     f7e:	c8 17       	cp	r28, r24
     f80:	d9 07       	cpc	r29, r25
     f82:	59 f4       	brne	.+22     	; 0xf9a <free+0x82>
     f84:	88 81       	ld	r24, Y
     f86:	99 81       	ldd	r25, Y+1	; 0x01
     f88:	84 0f       	add	r24, r20
     f8a:	95 1f       	adc	r25, r21
     f8c:	02 96       	adiw	r24, 0x02	; 2
     f8e:	91 83       	std	Z+1, r25	; 0x01
     f90:	80 83       	st	Z, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	9b 81       	ldd	r25, Y+3	; 0x03
     f96:	93 83       	std	Z+3, r25	; 0x03
     f98:	82 83       	std	Z+2, r24	; 0x02
     f9a:	21 15       	cp	r18, r1
     f9c:	31 05       	cpc	r19, r1
     f9e:	29 f4       	brne	.+10     	; 0xfaa <free+0x92>
     fa0:	f0 93 15 04 	sts	0x0415, r31	; 0x800415 <__flp+0x1>
     fa4:	e0 93 14 04 	sts	0x0414, r30	; 0x800414 <__flp>
     fa8:	3d c0       	rjmp	.+122    	; 0x1024 <free+0x10c>
     faa:	e9 01       	movw	r28, r18
     fac:	fb 83       	std	Y+3, r31	; 0x03
     fae:	ea 83       	std	Y+2, r30	; 0x02
     fb0:	49 91       	ld	r20, Y+
     fb2:	59 91       	ld	r21, Y+
     fb4:	c4 0f       	add	r28, r20
     fb6:	d5 1f       	adc	r29, r21
     fb8:	ec 17       	cp	r30, r28
     fba:	fd 07       	cpc	r31, r29
     fbc:	61 f4       	brne	.+24     	; 0xfd6 <free+0xbe>
     fbe:	80 81       	ld	r24, Z
     fc0:	91 81       	ldd	r25, Z+1	; 0x01
     fc2:	84 0f       	add	r24, r20
     fc4:	95 1f       	adc	r25, r21
     fc6:	02 96       	adiw	r24, 0x02	; 2
     fc8:	e9 01       	movw	r28, r18
     fca:	99 83       	std	Y+1, r25	; 0x01
     fcc:	88 83       	st	Y, r24
     fce:	82 81       	ldd	r24, Z+2	; 0x02
     fd0:	93 81       	ldd	r25, Z+3	; 0x03
     fd2:	9b 83       	std	Y+3, r25	; 0x03
     fd4:	8a 83       	std	Y+2, r24	; 0x02
     fd6:	e0 e0       	ldi	r30, 0x00	; 0
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	12 96       	adiw	r26, 0x02	; 2
     fdc:	8d 91       	ld	r24, X+
     fde:	9c 91       	ld	r25, X
     fe0:	13 97       	sbiw	r26, 0x03	; 3
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	19 f0       	breq	.+6      	; 0xfec <free+0xd4>
     fe6:	fd 01       	movw	r30, r26
     fe8:	dc 01       	movw	r26, r24
     fea:	f7 cf       	rjmp	.-18     	; 0xfda <free+0xc2>
     fec:	8d 91       	ld	r24, X+
     fee:	9c 91       	ld	r25, X
     ff0:	11 97       	sbiw	r26, 0x01	; 1
     ff2:	9d 01       	movw	r18, r26
     ff4:	2e 5f       	subi	r18, 0xFE	; 254
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	82 0f       	add	r24, r18
     ffa:	93 1f       	adc	r25, r19
     ffc:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <__brkval>
    1000:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <__brkval+0x1>
    1004:	28 17       	cp	r18, r24
    1006:	39 07       	cpc	r19, r25
    1008:	69 f4       	brne	.+26     	; 0x1024 <free+0x10c>
    100a:	30 97       	sbiw	r30, 0x00	; 0
    100c:	29 f4       	brne	.+10     	; 0x1018 <free+0x100>
    100e:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <__flp+0x1>
    1012:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <__flp>
    1016:	02 c0       	rjmp	.+4      	; 0x101c <free+0x104>
    1018:	13 82       	std	Z+3, r1	; 0x03
    101a:	12 82       	std	Z+2, r1	; 0x02
    101c:	b0 93 13 04 	sts	0x0413, r27	; 0x800413 <__brkval+0x1>
    1020:	a0 93 12 04 	sts	0x0412, r26	; 0x800412 <__brkval>
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <strcat>:
    102a:	fb 01       	movw	r30, r22
    102c:	dc 01       	movw	r26, r24
    102e:	0d 90       	ld	r0, X+
    1030:	00 20       	and	r0, r0
    1032:	e9 f7       	brne	.-6      	; 0x102e <strcat+0x4>
    1034:	11 97       	sbiw	r26, 0x01	; 1
    1036:	01 90       	ld	r0, Z+
    1038:	0d 92       	st	X+, r0
    103a:	00 20       	and	r0, r0
    103c:	e1 f7       	brne	.-8      	; 0x1036 <strcat+0xc>
    103e:	08 95       	ret

00001040 <strrev>:
    1040:	dc 01       	movw	r26, r24
    1042:	fc 01       	movw	r30, r24
    1044:	67 2f       	mov	r22, r23
    1046:	71 91       	ld	r23, Z+
    1048:	77 23       	and	r23, r23
    104a:	e1 f7       	brne	.-8      	; 0x1044 <strrev+0x4>
    104c:	32 97       	sbiw	r30, 0x02	; 2
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <strrev+0x18>
    1050:	7c 91       	ld	r23, X
    1052:	6d 93       	st	X+, r22
    1054:	70 83       	st	Z, r23
    1056:	62 91       	ld	r22, -Z
    1058:	ae 17       	cp	r26, r30
    105a:	bf 07       	cpc	r27, r31
    105c:	c8 f3       	brcs	.-14     	; 0x1050 <strrev+0x10>
    105e:	08 95       	ret

00001060 <sprintf>:
    1060:	ae e0       	ldi	r26, 0x0E	; 14
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e6 e3       	ldi	r30, 0x36	; 54
    1066:	f8 e0       	ldi	r31, 0x08	; 8
    1068:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__prologue_saves__+0x1c>
    106c:	0d 89       	ldd	r16, Y+21	; 0x15
    106e:	1e 89       	ldd	r17, Y+22	; 0x16
    1070:	86 e0       	ldi	r24, 0x06	; 6
    1072:	8c 83       	std	Y+4, r24	; 0x04
    1074:	1a 83       	std	Y+2, r17	; 0x02
    1076:	09 83       	std	Y+1, r16	; 0x01
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	9f e7       	ldi	r25, 0x7F	; 127
    107c:	9e 83       	std	Y+6, r25	; 0x06
    107e:	8d 83       	std	Y+5, r24	; 0x05
    1080:	ae 01       	movw	r20, r28
    1082:	47 5e       	subi	r20, 0xE7	; 231
    1084:	5f 4f       	sbci	r21, 0xFF	; 255
    1086:	6f 89       	ldd	r22, Y+23	; 0x17
    1088:	78 8d       	ldd	r23, Y+24	; 0x18
    108a:	ce 01       	movw	r24, r28
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <vfprintf>
    1092:	ef 81       	ldd	r30, Y+7	; 0x07
    1094:	f8 85       	ldd	r31, Y+8	; 0x08
    1096:	e0 0f       	add	r30, r16
    1098:	f1 1f       	adc	r31, r17
    109a:	10 82       	st	Z, r1
    109c:	2e 96       	adiw	r28, 0x0e	; 14
    109e:	e4 e0       	ldi	r30, 0x04	; 4
    10a0:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__epilogue_restores__+0x1c>

000010a4 <vfprintf>:
    10a4:	ab e0       	ldi	r26, 0x0B	; 11
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e8 e5       	ldi	r30, 0x58	; 88
    10aa:	f8 e0       	ldi	r31, 0x08	; 8
    10ac:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__prologue_saves__>
    10b0:	6c 01       	movw	r12, r24
    10b2:	7b 01       	movw	r14, r22
    10b4:	8a 01       	movw	r16, r20
    10b6:	fc 01       	movw	r30, r24
    10b8:	17 82       	std	Z+7, r1	; 0x07
    10ba:	16 82       	std	Z+6, r1	; 0x06
    10bc:	83 81       	ldd	r24, Z+3	; 0x03
    10be:	81 ff       	sbrs	r24, 1
    10c0:	cc c1       	rjmp	.+920    	; 0x145a <vfprintf+0x3b6>
    10c2:	ce 01       	movw	r24, r28
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	3c 01       	movw	r6, r24
    10c8:	f6 01       	movw	r30, r12
    10ca:	93 81       	ldd	r25, Z+3	; 0x03
    10cc:	f7 01       	movw	r30, r14
    10ce:	93 fd       	sbrc	r25, 3
    10d0:	85 91       	lpm	r24, Z+
    10d2:	93 ff       	sbrs	r25, 3
    10d4:	81 91       	ld	r24, Z+
    10d6:	7f 01       	movw	r14, r30
    10d8:	88 23       	and	r24, r24
    10da:	09 f4       	brne	.+2      	; 0x10de <vfprintf+0x3a>
    10dc:	ba c1       	rjmp	.+884    	; 0x1452 <vfprintf+0x3ae>
    10de:	85 32       	cpi	r24, 0x25	; 37
    10e0:	39 f4       	brne	.+14     	; 0x10f0 <vfprintf+0x4c>
    10e2:	93 fd       	sbrc	r25, 3
    10e4:	85 91       	lpm	r24, Z+
    10e6:	93 ff       	sbrs	r25, 3
    10e8:	81 91       	ld	r24, Z+
    10ea:	7f 01       	movw	r14, r30
    10ec:	85 32       	cpi	r24, 0x25	; 37
    10ee:	29 f4       	brne	.+10     	; 0x10fa <vfprintf+0x56>
    10f0:	b6 01       	movw	r22, r12
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    10f8:	e7 cf       	rjmp	.-50     	; 0x10c8 <vfprintf+0x24>
    10fa:	91 2c       	mov	r9, r1
    10fc:	21 2c       	mov	r2, r1
    10fe:	31 2c       	mov	r3, r1
    1100:	ff e1       	ldi	r31, 0x1F	; 31
    1102:	f3 15       	cp	r31, r3
    1104:	d8 f0       	brcs	.+54     	; 0x113c <vfprintf+0x98>
    1106:	8b 32       	cpi	r24, 0x2B	; 43
    1108:	79 f0       	breq	.+30     	; 0x1128 <vfprintf+0x84>
    110a:	38 f4       	brcc	.+14     	; 0x111a <vfprintf+0x76>
    110c:	80 32       	cpi	r24, 0x20	; 32
    110e:	79 f0       	breq	.+30     	; 0x112e <vfprintf+0x8a>
    1110:	83 32       	cpi	r24, 0x23	; 35
    1112:	a1 f4       	brne	.+40     	; 0x113c <vfprintf+0x98>
    1114:	23 2d       	mov	r18, r3
    1116:	20 61       	ori	r18, 0x10	; 16
    1118:	1d c0       	rjmp	.+58     	; 0x1154 <vfprintf+0xb0>
    111a:	8d 32       	cpi	r24, 0x2D	; 45
    111c:	61 f0       	breq	.+24     	; 0x1136 <vfprintf+0x92>
    111e:	80 33       	cpi	r24, 0x30	; 48
    1120:	69 f4       	brne	.+26     	; 0x113c <vfprintf+0x98>
    1122:	23 2d       	mov	r18, r3
    1124:	21 60       	ori	r18, 0x01	; 1
    1126:	16 c0       	rjmp	.+44     	; 0x1154 <vfprintf+0xb0>
    1128:	83 2d       	mov	r24, r3
    112a:	82 60       	ori	r24, 0x02	; 2
    112c:	38 2e       	mov	r3, r24
    112e:	e3 2d       	mov	r30, r3
    1130:	e4 60       	ori	r30, 0x04	; 4
    1132:	3e 2e       	mov	r3, r30
    1134:	2a c0       	rjmp	.+84     	; 0x118a <vfprintf+0xe6>
    1136:	f3 2d       	mov	r31, r3
    1138:	f8 60       	ori	r31, 0x08	; 8
    113a:	1d c0       	rjmp	.+58     	; 0x1176 <vfprintf+0xd2>
    113c:	37 fc       	sbrc	r3, 7
    113e:	2d c0       	rjmp	.+90     	; 0x119a <vfprintf+0xf6>
    1140:	20 ed       	ldi	r18, 0xD0	; 208
    1142:	28 0f       	add	r18, r24
    1144:	2a 30       	cpi	r18, 0x0A	; 10
    1146:	40 f0       	brcs	.+16     	; 0x1158 <vfprintf+0xb4>
    1148:	8e 32       	cpi	r24, 0x2E	; 46
    114a:	b9 f4       	brne	.+46     	; 0x117a <vfprintf+0xd6>
    114c:	36 fc       	sbrc	r3, 6
    114e:	81 c1       	rjmp	.+770    	; 0x1452 <vfprintf+0x3ae>
    1150:	23 2d       	mov	r18, r3
    1152:	20 64       	ori	r18, 0x40	; 64
    1154:	32 2e       	mov	r3, r18
    1156:	19 c0       	rjmp	.+50     	; 0x118a <vfprintf+0xe6>
    1158:	36 fe       	sbrs	r3, 6
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <vfprintf+0xc4>
    115c:	8a e0       	ldi	r24, 0x0A	; 10
    115e:	98 9e       	mul	r9, r24
    1160:	20 0d       	add	r18, r0
    1162:	11 24       	eor	r1, r1
    1164:	92 2e       	mov	r9, r18
    1166:	11 c0       	rjmp	.+34     	; 0x118a <vfprintf+0xe6>
    1168:	ea e0       	ldi	r30, 0x0A	; 10
    116a:	2e 9e       	mul	r2, r30
    116c:	20 0d       	add	r18, r0
    116e:	11 24       	eor	r1, r1
    1170:	22 2e       	mov	r2, r18
    1172:	f3 2d       	mov	r31, r3
    1174:	f0 62       	ori	r31, 0x20	; 32
    1176:	3f 2e       	mov	r3, r31
    1178:	08 c0       	rjmp	.+16     	; 0x118a <vfprintf+0xe6>
    117a:	8c 36       	cpi	r24, 0x6C	; 108
    117c:	21 f4       	brne	.+8      	; 0x1186 <vfprintf+0xe2>
    117e:	83 2d       	mov	r24, r3
    1180:	80 68       	ori	r24, 0x80	; 128
    1182:	38 2e       	mov	r3, r24
    1184:	02 c0       	rjmp	.+4      	; 0x118a <vfprintf+0xe6>
    1186:	88 36       	cpi	r24, 0x68	; 104
    1188:	41 f4       	brne	.+16     	; 0x119a <vfprintf+0xf6>
    118a:	f7 01       	movw	r30, r14
    118c:	93 fd       	sbrc	r25, 3
    118e:	85 91       	lpm	r24, Z+
    1190:	93 ff       	sbrs	r25, 3
    1192:	81 91       	ld	r24, Z+
    1194:	7f 01       	movw	r14, r30
    1196:	81 11       	cpse	r24, r1
    1198:	b3 cf       	rjmp	.-154    	; 0x1100 <vfprintf+0x5c>
    119a:	98 2f       	mov	r25, r24
    119c:	9f 7d       	andi	r25, 0xDF	; 223
    119e:	95 54       	subi	r25, 0x45	; 69
    11a0:	93 30       	cpi	r25, 0x03	; 3
    11a2:	28 f4       	brcc	.+10     	; 0x11ae <vfprintf+0x10a>
    11a4:	0c 5f       	subi	r16, 0xFC	; 252
    11a6:	1f 4f       	sbci	r17, 0xFF	; 255
    11a8:	9f e3       	ldi	r25, 0x3F	; 63
    11aa:	99 83       	std	Y+1, r25	; 0x01
    11ac:	0d c0       	rjmp	.+26     	; 0x11c8 <vfprintf+0x124>
    11ae:	83 36       	cpi	r24, 0x63	; 99
    11b0:	31 f0       	breq	.+12     	; 0x11be <vfprintf+0x11a>
    11b2:	83 37       	cpi	r24, 0x73	; 115
    11b4:	71 f0       	breq	.+28     	; 0x11d2 <vfprintf+0x12e>
    11b6:	83 35       	cpi	r24, 0x53	; 83
    11b8:	09 f0       	breq	.+2      	; 0x11bc <vfprintf+0x118>
    11ba:	59 c0       	rjmp	.+178    	; 0x126e <vfprintf+0x1ca>
    11bc:	21 c0       	rjmp	.+66     	; 0x1200 <vfprintf+0x15c>
    11be:	f8 01       	movw	r30, r16
    11c0:	80 81       	ld	r24, Z
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	0e 5f       	subi	r16, 0xFE	; 254
    11c6:	1f 4f       	sbci	r17, 0xFF	; 255
    11c8:	88 24       	eor	r8, r8
    11ca:	83 94       	inc	r8
    11cc:	91 2c       	mov	r9, r1
    11ce:	53 01       	movw	r10, r6
    11d0:	13 c0       	rjmp	.+38     	; 0x11f8 <vfprintf+0x154>
    11d2:	28 01       	movw	r4, r16
    11d4:	f2 e0       	ldi	r31, 0x02	; 2
    11d6:	4f 0e       	add	r4, r31
    11d8:	51 1c       	adc	r5, r1
    11da:	f8 01       	movw	r30, r16
    11dc:	a0 80       	ld	r10, Z
    11de:	b1 80       	ldd	r11, Z+1	; 0x01
    11e0:	36 fe       	sbrs	r3, 6
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <vfprintf+0x146>
    11e4:	69 2d       	mov	r22, r9
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <vfprintf+0x14a>
    11ea:	6f ef       	ldi	r22, 0xFF	; 255
    11ec:	7f ef       	ldi	r23, 0xFF	; 255
    11ee:	c5 01       	movw	r24, r10
    11f0:	0e 94 3e 0a 	call	0x147c	; 0x147c <strnlen>
    11f4:	4c 01       	movw	r8, r24
    11f6:	82 01       	movw	r16, r4
    11f8:	f3 2d       	mov	r31, r3
    11fa:	ff 77       	andi	r31, 0x7F	; 127
    11fc:	3f 2e       	mov	r3, r31
    11fe:	16 c0       	rjmp	.+44     	; 0x122c <vfprintf+0x188>
    1200:	28 01       	movw	r4, r16
    1202:	22 e0       	ldi	r18, 0x02	; 2
    1204:	42 0e       	add	r4, r18
    1206:	51 1c       	adc	r5, r1
    1208:	f8 01       	movw	r30, r16
    120a:	a0 80       	ld	r10, Z
    120c:	b1 80       	ldd	r11, Z+1	; 0x01
    120e:	36 fe       	sbrs	r3, 6
    1210:	03 c0       	rjmp	.+6      	; 0x1218 <vfprintf+0x174>
    1212:	69 2d       	mov	r22, r9
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	02 c0       	rjmp	.+4      	; 0x121c <vfprintf+0x178>
    1218:	6f ef       	ldi	r22, 0xFF	; 255
    121a:	7f ef       	ldi	r23, 0xFF	; 255
    121c:	c5 01       	movw	r24, r10
    121e:	0e 94 33 0a 	call	0x1466	; 0x1466 <strnlen_P>
    1222:	4c 01       	movw	r8, r24
    1224:	f3 2d       	mov	r31, r3
    1226:	f0 68       	ori	r31, 0x80	; 128
    1228:	3f 2e       	mov	r3, r31
    122a:	82 01       	movw	r16, r4
    122c:	33 fc       	sbrc	r3, 3
    122e:	1b c0       	rjmp	.+54     	; 0x1266 <vfprintf+0x1c2>
    1230:	82 2d       	mov	r24, r2
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	88 16       	cp	r8, r24
    1236:	99 06       	cpc	r9, r25
    1238:	b0 f4       	brcc	.+44     	; 0x1266 <vfprintf+0x1c2>
    123a:	b6 01       	movw	r22, r12
    123c:	80 e2       	ldi	r24, 0x20	; 32
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    1244:	2a 94       	dec	r2
    1246:	f4 cf       	rjmp	.-24     	; 0x1230 <vfprintf+0x18c>
    1248:	f5 01       	movw	r30, r10
    124a:	37 fc       	sbrc	r3, 7
    124c:	85 91       	lpm	r24, Z+
    124e:	37 fe       	sbrs	r3, 7
    1250:	81 91       	ld	r24, Z+
    1252:	5f 01       	movw	r10, r30
    1254:	b6 01       	movw	r22, r12
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    125c:	21 10       	cpse	r2, r1
    125e:	2a 94       	dec	r2
    1260:	21 e0       	ldi	r18, 0x01	; 1
    1262:	82 1a       	sub	r8, r18
    1264:	91 08       	sbc	r9, r1
    1266:	81 14       	cp	r8, r1
    1268:	91 04       	cpc	r9, r1
    126a:	71 f7       	brne	.-36     	; 0x1248 <vfprintf+0x1a4>
    126c:	e8 c0       	rjmp	.+464    	; 0x143e <vfprintf+0x39a>
    126e:	84 36       	cpi	r24, 0x64	; 100
    1270:	11 f0       	breq	.+4      	; 0x1276 <vfprintf+0x1d2>
    1272:	89 36       	cpi	r24, 0x69	; 105
    1274:	41 f5       	brne	.+80     	; 0x12c6 <vfprintf+0x222>
    1276:	f8 01       	movw	r30, r16
    1278:	37 fe       	sbrs	r3, 7
    127a:	07 c0       	rjmp	.+14     	; 0x128a <vfprintf+0x1e6>
    127c:	60 81       	ld	r22, Z
    127e:	71 81       	ldd	r23, Z+1	; 0x01
    1280:	82 81       	ldd	r24, Z+2	; 0x02
    1282:	93 81       	ldd	r25, Z+3	; 0x03
    1284:	0c 5f       	subi	r16, 0xFC	; 252
    1286:	1f 4f       	sbci	r17, 0xFF	; 255
    1288:	08 c0       	rjmp	.+16     	; 0x129a <vfprintf+0x1f6>
    128a:	60 81       	ld	r22, Z
    128c:	71 81       	ldd	r23, Z+1	; 0x01
    128e:	07 2e       	mov	r0, r23
    1290:	00 0c       	add	r0, r0
    1292:	88 0b       	sbc	r24, r24
    1294:	99 0b       	sbc	r25, r25
    1296:	0e 5f       	subi	r16, 0xFE	; 254
    1298:	1f 4f       	sbci	r17, 0xFF	; 255
    129a:	f3 2d       	mov	r31, r3
    129c:	ff 76       	andi	r31, 0x6F	; 111
    129e:	3f 2e       	mov	r3, r31
    12a0:	97 ff       	sbrs	r25, 7
    12a2:	09 c0       	rjmp	.+18     	; 0x12b6 <vfprintf+0x212>
    12a4:	90 95       	com	r25
    12a6:	80 95       	com	r24
    12a8:	70 95       	com	r23
    12aa:	61 95       	neg	r22
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	8f 4f       	sbci	r24, 0xFF	; 255
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	f0 68       	ori	r31, 0x80	; 128
    12b4:	3f 2e       	mov	r3, r31
    12b6:	2a e0       	ldi	r18, 0x0A	; 10
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	a3 01       	movw	r20, r6
    12bc:	0e 94 85 0a 	call	0x150a	; 0x150a <__ultoa_invert>
    12c0:	88 2e       	mov	r8, r24
    12c2:	86 18       	sub	r8, r6
    12c4:	45 c0       	rjmp	.+138    	; 0x1350 <vfprintf+0x2ac>
    12c6:	85 37       	cpi	r24, 0x75	; 117
    12c8:	31 f4       	brne	.+12     	; 0x12d6 <vfprintf+0x232>
    12ca:	23 2d       	mov	r18, r3
    12cc:	2f 7e       	andi	r18, 0xEF	; 239
    12ce:	b2 2e       	mov	r11, r18
    12d0:	2a e0       	ldi	r18, 0x0A	; 10
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	25 c0       	rjmp	.+74     	; 0x1320 <vfprintf+0x27c>
    12d6:	93 2d       	mov	r25, r3
    12d8:	99 7f       	andi	r25, 0xF9	; 249
    12da:	b9 2e       	mov	r11, r25
    12dc:	8f 36       	cpi	r24, 0x6F	; 111
    12de:	c1 f0       	breq	.+48     	; 0x1310 <vfprintf+0x26c>
    12e0:	18 f4       	brcc	.+6      	; 0x12e8 <vfprintf+0x244>
    12e2:	88 35       	cpi	r24, 0x58	; 88
    12e4:	79 f0       	breq	.+30     	; 0x1304 <vfprintf+0x260>
    12e6:	b5 c0       	rjmp	.+362    	; 0x1452 <vfprintf+0x3ae>
    12e8:	80 37       	cpi	r24, 0x70	; 112
    12ea:	19 f0       	breq	.+6      	; 0x12f2 <vfprintf+0x24e>
    12ec:	88 37       	cpi	r24, 0x78	; 120
    12ee:	21 f0       	breq	.+8      	; 0x12f8 <vfprintf+0x254>
    12f0:	b0 c0       	rjmp	.+352    	; 0x1452 <vfprintf+0x3ae>
    12f2:	e9 2f       	mov	r30, r25
    12f4:	e0 61       	ori	r30, 0x10	; 16
    12f6:	be 2e       	mov	r11, r30
    12f8:	b4 fe       	sbrs	r11, 4
    12fa:	0d c0       	rjmp	.+26     	; 0x1316 <vfprintf+0x272>
    12fc:	fb 2d       	mov	r31, r11
    12fe:	f4 60       	ori	r31, 0x04	; 4
    1300:	bf 2e       	mov	r11, r31
    1302:	09 c0       	rjmp	.+18     	; 0x1316 <vfprintf+0x272>
    1304:	34 fe       	sbrs	r3, 4
    1306:	0a c0       	rjmp	.+20     	; 0x131c <vfprintf+0x278>
    1308:	29 2f       	mov	r18, r25
    130a:	26 60       	ori	r18, 0x06	; 6
    130c:	b2 2e       	mov	r11, r18
    130e:	06 c0       	rjmp	.+12     	; 0x131c <vfprintf+0x278>
    1310:	28 e0       	ldi	r18, 0x08	; 8
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	05 c0       	rjmp	.+10     	; 0x1320 <vfprintf+0x27c>
    1316:	20 e1       	ldi	r18, 0x10	; 16
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <vfprintf+0x27c>
    131c:	20 e1       	ldi	r18, 0x10	; 16
    131e:	32 e0       	ldi	r19, 0x02	; 2
    1320:	f8 01       	movw	r30, r16
    1322:	b7 fe       	sbrs	r11, 7
    1324:	07 c0       	rjmp	.+14     	; 0x1334 <vfprintf+0x290>
    1326:	60 81       	ld	r22, Z
    1328:	71 81       	ldd	r23, Z+1	; 0x01
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	93 81       	ldd	r25, Z+3	; 0x03
    132e:	0c 5f       	subi	r16, 0xFC	; 252
    1330:	1f 4f       	sbci	r17, 0xFF	; 255
    1332:	06 c0       	rjmp	.+12     	; 0x1340 <vfprintf+0x29c>
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 5f       	subi	r16, 0xFE	; 254
    133e:	1f 4f       	sbci	r17, 0xFF	; 255
    1340:	a3 01       	movw	r20, r6
    1342:	0e 94 85 0a 	call	0x150a	; 0x150a <__ultoa_invert>
    1346:	88 2e       	mov	r8, r24
    1348:	86 18       	sub	r8, r6
    134a:	fb 2d       	mov	r31, r11
    134c:	ff 77       	andi	r31, 0x7F	; 127
    134e:	3f 2e       	mov	r3, r31
    1350:	36 fe       	sbrs	r3, 6
    1352:	0d c0       	rjmp	.+26     	; 0x136e <vfprintf+0x2ca>
    1354:	23 2d       	mov	r18, r3
    1356:	2e 7f       	andi	r18, 0xFE	; 254
    1358:	a2 2e       	mov	r10, r18
    135a:	89 14       	cp	r8, r9
    135c:	58 f4       	brcc	.+22     	; 0x1374 <vfprintf+0x2d0>
    135e:	34 fe       	sbrs	r3, 4
    1360:	0b c0       	rjmp	.+22     	; 0x1378 <vfprintf+0x2d4>
    1362:	32 fc       	sbrc	r3, 2
    1364:	09 c0       	rjmp	.+18     	; 0x1378 <vfprintf+0x2d4>
    1366:	83 2d       	mov	r24, r3
    1368:	8e 7e       	andi	r24, 0xEE	; 238
    136a:	a8 2e       	mov	r10, r24
    136c:	05 c0       	rjmp	.+10     	; 0x1378 <vfprintf+0x2d4>
    136e:	b8 2c       	mov	r11, r8
    1370:	a3 2c       	mov	r10, r3
    1372:	03 c0       	rjmp	.+6      	; 0x137a <vfprintf+0x2d6>
    1374:	b8 2c       	mov	r11, r8
    1376:	01 c0       	rjmp	.+2      	; 0x137a <vfprintf+0x2d6>
    1378:	b9 2c       	mov	r11, r9
    137a:	a4 fe       	sbrs	r10, 4
    137c:	0f c0       	rjmp	.+30     	; 0x139c <vfprintf+0x2f8>
    137e:	fe 01       	movw	r30, r28
    1380:	e8 0d       	add	r30, r8
    1382:	f1 1d       	adc	r31, r1
    1384:	80 81       	ld	r24, Z
    1386:	80 33       	cpi	r24, 0x30	; 48
    1388:	21 f4       	brne	.+8      	; 0x1392 <vfprintf+0x2ee>
    138a:	9a 2d       	mov	r25, r10
    138c:	99 7e       	andi	r25, 0xE9	; 233
    138e:	a9 2e       	mov	r10, r25
    1390:	09 c0       	rjmp	.+18     	; 0x13a4 <vfprintf+0x300>
    1392:	a2 fe       	sbrs	r10, 2
    1394:	06 c0       	rjmp	.+12     	; 0x13a2 <vfprintf+0x2fe>
    1396:	b3 94       	inc	r11
    1398:	b3 94       	inc	r11
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <vfprintf+0x300>
    139c:	8a 2d       	mov	r24, r10
    139e:	86 78       	andi	r24, 0x86	; 134
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <vfprintf+0x300>
    13a2:	b3 94       	inc	r11
    13a4:	a3 fc       	sbrc	r10, 3
    13a6:	11 c0       	rjmp	.+34     	; 0x13ca <vfprintf+0x326>
    13a8:	a0 fe       	sbrs	r10, 0
    13aa:	06 c0       	rjmp	.+12     	; 0x13b8 <vfprintf+0x314>
    13ac:	b2 14       	cp	r11, r2
    13ae:	88 f4       	brcc	.+34     	; 0x13d2 <vfprintf+0x32e>
    13b0:	28 0c       	add	r2, r8
    13b2:	92 2c       	mov	r9, r2
    13b4:	9b 18       	sub	r9, r11
    13b6:	0e c0       	rjmp	.+28     	; 0x13d4 <vfprintf+0x330>
    13b8:	b2 14       	cp	r11, r2
    13ba:	60 f4       	brcc	.+24     	; 0x13d4 <vfprintf+0x330>
    13bc:	b6 01       	movw	r22, r12
    13be:	80 e2       	ldi	r24, 0x20	; 32
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    13c6:	b3 94       	inc	r11
    13c8:	f7 cf       	rjmp	.-18     	; 0x13b8 <vfprintf+0x314>
    13ca:	b2 14       	cp	r11, r2
    13cc:	18 f4       	brcc	.+6      	; 0x13d4 <vfprintf+0x330>
    13ce:	2b 18       	sub	r2, r11
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <vfprintf+0x332>
    13d2:	98 2c       	mov	r9, r8
    13d4:	21 2c       	mov	r2, r1
    13d6:	a4 fe       	sbrs	r10, 4
    13d8:	10 c0       	rjmp	.+32     	; 0x13fa <vfprintf+0x356>
    13da:	b6 01       	movw	r22, r12
    13dc:	80 e3       	ldi	r24, 0x30	; 48
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    13e4:	a2 fe       	sbrs	r10, 2
    13e6:	17 c0       	rjmp	.+46     	; 0x1416 <vfprintf+0x372>
    13e8:	a1 fc       	sbrc	r10, 1
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <vfprintf+0x34e>
    13ec:	88 e7       	ldi	r24, 0x78	; 120
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <vfprintf+0x352>
    13f2:	88 e5       	ldi	r24, 0x58	; 88
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	b6 01       	movw	r22, r12
    13f8:	0c c0       	rjmp	.+24     	; 0x1412 <vfprintf+0x36e>
    13fa:	8a 2d       	mov	r24, r10
    13fc:	86 78       	andi	r24, 0x86	; 134
    13fe:	59 f0       	breq	.+22     	; 0x1416 <vfprintf+0x372>
    1400:	a1 fe       	sbrs	r10, 1
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <vfprintf+0x364>
    1404:	8b e2       	ldi	r24, 0x2B	; 43
    1406:	01 c0       	rjmp	.+2      	; 0x140a <vfprintf+0x366>
    1408:	80 e2       	ldi	r24, 0x20	; 32
    140a:	a7 fc       	sbrc	r10, 7
    140c:	8d e2       	ldi	r24, 0x2D	; 45
    140e:	b6 01       	movw	r22, r12
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    1416:	89 14       	cp	r8, r9
    1418:	38 f4       	brcc	.+14     	; 0x1428 <vfprintf+0x384>
    141a:	b6 01       	movw	r22, r12
    141c:	80 e3       	ldi	r24, 0x30	; 48
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    1424:	9a 94       	dec	r9
    1426:	f7 cf       	rjmp	.-18     	; 0x1416 <vfprintf+0x372>
    1428:	8a 94       	dec	r8
    142a:	f3 01       	movw	r30, r6
    142c:	e8 0d       	add	r30, r8
    142e:	f1 1d       	adc	r31, r1
    1430:	80 81       	ld	r24, Z
    1432:	b6 01       	movw	r22, r12
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    143a:	81 10       	cpse	r8, r1
    143c:	f5 cf       	rjmp	.-22     	; 0x1428 <vfprintf+0x384>
    143e:	22 20       	and	r2, r2
    1440:	09 f4       	brne	.+2      	; 0x1444 <vfprintf+0x3a0>
    1442:	42 ce       	rjmp	.-892    	; 0x10c8 <vfprintf+0x24>
    1444:	b6 01       	movw	r22, r12
    1446:	80 e2       	ldi	r24, 0x20	; 32
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    144e:	2a 94       	dec	r2
    1450:	f6 cf       	rjmp	.-20     	; 0x143e <vfprintf+0x39a>
    1452:	f6 01       	movw	r30, r12
    1454:	86 81       	ldd	r24, Z+6	; 0x06
    1456:	97 81       	ldd	r25, Z+7	; 0x07
    1458:	02 c0       	rjmp	.+4      	; 0x145e <vfprintf+0x3ba>
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	9f ef       	ldi	r25, 0xFF	; 255
    145e:	2b 96       	adiw	r28, 0x0b	; 11
    1460:	e2 e1       	ldi	r30, 0x12	; 18
    1462:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__epilogue_restores__>

00001466 <strnlen_P>:
    1466:	fc 01       	movw	r30, r24
    1468:	05 90       	lpm	r0, Z+
    146a:	61 50       	subi	r22, 0x01	; 1
    146c:	70 40       	sbci	r23, 0x00	; 0
    146e:	01 10       	cpse	r0, r1
    1470:	d8 f7       	brcc	.-10     	; 0x1468 <strnlen_P+0x2>
    1472:	80 95       	com	r24
    1474:	90 95       	com	r25
    1476:	8e 0f       	add	r24, r30
    1478:	9f 1f       	adc	r25, r31
    147a:	08 95       	ret

0000147c <strnlen>:
    147c:	fc 01       	movw	r30, r24
    147e:	61 50       	subi	r22, 0x01	; 1
    1480:	70 40       	sbci	r23, 0x00	; 0
    1482:	01 90       	ld	r0, Z+
    1484:	01 10       	cpse	r0, r1
    1486:	d8 f7       	brcc	.-10     	; 0x147e <strnlen+0x2>
    1488:	80 95       	com	r24
    148a:	90 95       	com	r25
    148c:	8e 0f       	add	r24, r30
    148e:	9f 1f       	adc	r25, r31
    1490:	08 95       	ret

00001492 <fputc>:
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	fb 01       	movw	r30, r22
    149c:	23 81       	ldd	r18, Z+3	; 0x03
    149e:	21 fd       	sbrc	r18, 1
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <fputc+0x16>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    14a6:	2c c0       	rjmp	.+88     	; 0x1500 <fputc+0x6e>
    14a8:	22 ff       	sbrs	r18, 2
    14aa:	16 c0       	rjmp	.+44     	; 0x14d8 <fputc+0x46>
    14ac:	46 81       	ldd	r20, Z+6	; 0x06
    14ae:	57 81       	ldd	r21, Z+7	; 0x07
    14b0:	24 81       	ldd	r18, Z+4	; 0x04
    14b2:	35 81       	ldd	r19, Z+5	; 0x05
    14b4:	42 17       	cp	r20, r18
    14b6:	53 07       	cpc	r21, r19
    14b8:	44 f4       	brge	.+16     	; 0x14ca <fputc+0x38>
    14ba:	a0 81       	ld	r26, Z
    14bc:	b1 81       	ldd	r27, Z+1	; 0x01
    14be:	9d 01       	movw	r18, r26
    14c0:	2f 5f       	subi	r18, 0xFF	; 255
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	31 83       	std	Z+1, r19	; 0x01
    14c6:	20 83       	st	Z, r18
    14c8:	8c 93       	st	X, r24
    14ca:	26 81       	ldd	r18, Z+6	; 0x06
    14cc:	37 81       	ldd	r19, Z+7	; 0x07
    14ce:	2f 5f       	subi	r18, 0xFF	; 255
    14d0:	3f 4f       	sbci	r19, 0xFF	; 255
    14d2:	37 83       	std	Z+7, r19	; 0x07
    14d4:	26 83       	std	Z+6, r18	; 0x06
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <fputc+0x6e>
    14d8:	8b 01       	movw	r16, r22
    14da:	ec 01       	movw	r28, r24
    14dc:	fb 01       	movw	r30, r22
    14de:	00 84       	ldd	r0, Z+8	; 0x08
    14e0:	f1 85       	ldd	r31, Z+9	; 0x09
    14e2:	e0 2d       	mov	r30, r0
    14e4:	09 95       	icall
    14e6:	89 2b       	or	r24, r25
    14e8:	e1 f6       	brne	.-72     	; 0x14a2 <fputc+0x10>
    14ea:	d8 01       	movw	r26, r16
    14ec:	16 96       	adiw	r26, 0x06	; 6
    14ee:	8d 91       	ld	r24, X+
    14f0:	9c 91       	ld	r25, X
    14f2:	17 97       	sbiw	r26, 0x07	; 7
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	17 96       	adiw	r26, 0x07	; 7
    14f8:	9c 93       	st	X, r25
    14fa:	8e 93       	st	-X, r24
    14fc:	16 97       	sbiw	r26, 0x06	; 6
    14fe:	ce 01       	movw	r24, r28
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	08 95       	ret

0000150a <__ultoa_invert>:
    150a:	fa 01       	movw	r30, r20
    150c:	aa 27       	eor	r26, r26
    150e:	28 30       	cpi	r18, 0x08	; 8
    1510:	51 f1       	breq	.+84     	; 0x1566 <__ultoa_invert+0x5c>
    1512:	20 31       	cpi	r18, 0x10	; 16
    1514:	81 f1       	breq	.+96     	; 0x1576 <__ultoa_invert+0x6c>
    1516:	e8 94       	clt
    1518:	6f 93       	push	r22
    151a:	6e 7f       	andi	r22, 0xFE	; 254
    151c:	6e 5f       	subi	r22, 0xFE	; 254
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	8f 4f       	sbci	r24, 0xFF	; 255
    1522:	9f 4f       	sbci	r25, 0xFF	; 255
    1524:	af 4f       	sbci	r26, 0xFF	; 255
    1526:	b1 e0       	ldi	r27, 0x01	; 1
    1528:	3e d0       	rcall	.+124    	; 0x15a6 <__ultoa_invert+0x9c>
    152a:	b4 e0       	ldi	r27, 0x04	; 4
    152c:	3c d0       	rcall	.+120    	; 0x15a6 <__ultoa_invert+0x9c>
    152e:	67 0f       	add	r22, r23
    1530:	78 1f       	adc	r23, r24
    1532:	89 1f       	adc	r24, r25
    1534:	9a 1f       	adc	r25, r26
    1536:	a1 1d       	adc	r26, r1
    1538:	68 0f       	add	r22, r24
    153a:	79 1f       	adc	r23, r25
    153c:	8a 1f       	adc	r24, r26
    153e:	91 1d       	adc	r25, r1
    1540:	a1 1d       	adc	r26, r1
    1542:	6a 0f       	add	r22, r26
    1544:	71 1d       	adc	r23, r1
    1546:	81 1d       	adc	r24, r1
    1548:	91 1d       	adc	r25, r1
    154a:	a1 1d       	adc	r26, r1
    154c:	20 d0       	rcall	.+64     	; 0x158e <__ultoa_invert+0x84>
    154e:	09 f4       	brne	.+2      	; 0x1552 <__ultoa_invert+0x48>
    1550:	68 94       	set
    1552:	3f 91       	pop	r19
    1554:	2a e0       	ldi	r18, 0x0A	; 10
    1556:	26 9f       	mul	r18, r22
    1558:	11 24       	eor	r1, r1
    155a:	30 19       	sub	r19, r0
    155c:	30 5d       	subi	r19, 0xD0	; 208
    155e:	31 93       	st	Z+, r19
    1560:	de f6       	brtc	.-74     	; 0x1518 <__ultoa_invert+0xe>
    1562:	cf 01       	movw	r24, r30
    1564:	08 95       	ret
    1566:	46 2f       	mov	r20, r22
    1568:	47 70       	andi	r20, 0x07	; 7
    156a:	40 5d       	subi	r20, 0xD0	; 208
    156c:	41 93       	st	Z+, r20
    156e:	b3 e0       	ldi	r27, 0x03	; 3
    1570:	0f d0       	rcall	.+30     	; 0x1590 <__ultoa_invert+0x86>
    1572:	c9 f7       	brne	.-14     	; 0x1566 <__ultoa_invert+0x5c>
    1574:	f6 cf       	rjmp	.-20     	; 0x1562 <__ultoa_invert+0x58>
    1576:	46 2f       	mov	r20, r22
    1578:	4f 70       	andi	r20, 0x0F	; 15
    157a:	40 5d       	subi	r20, 0xD0	; 208
    157c:	4a 33       	cpi	r20, 0x3A	; 58
    157e:	18 f0       	brcs	.+6      	; 0x1586 <__ultoa_invert+0x7c>
    1580:	49 5d       	subi	r20, 0xD9	; 217
    1582:	31 fd       	sbrc	r19, 1
    1584:	40 52       	subi	r20, 0x20	; 32
    1586:	41 93       	st	Z+, r20
    1588:	02 d0       	rcall	.+4      	; 0x158e <__ultoa_invert+0x84>
    158a:	a9 f7       	brne	.-22     	; 0x1576 <__ultoa_invert+0x6c>
    158c:	ea cf       	rjmp	.-44     	; 0x1562 <__ultoa_invert+0x58>
    158e:	b4 e0       	ldi	r27, 0x04	; 4
    1590:	a6 95       	lsr	r26
    1592:	97 95       	ror	r25
    1594:	87 95       	ror	r24
    1596:	77 95       	ror	r23
    1598:	67 95       	ror	r22
    159a:	ba 95       	dec	r27
    159c:	c9 f7       	brne	.-14     	; 0x1590 <__ultoa_invert+0x86>
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	61 05       	cpc	r22, r1
    15a2:	71 05       	cpc	r23, r1
    15a4:	08 95       	ret
    15a6:	9b 01       	movw	r18, r22
    15a8:	ac 01       	movw	r20, r24
    15aa:	0a 2e       	mov	r0, r26
    15ac:	06 94       	lsr	r0
    15ae:	57 95       	ror	r21
    15b0:	47 95       	ror	r20
    15b2:	37 95       	ror	r19
    15b4:	27 95       	ror	r18
    15b6:	ba 95       	dec	r27
    15b8:	c9 f7       	brne	.-14     	; 0x15ac <__ultoa_invert+0xa2>
    15ba:	62 0f       	add	r22, r18
    15bc:	73 1f       	adc	r23, r19
    15be:	84 1f       	adc	r24, r20
    15c0:	95 1f       	adc	r25, r21
    15c2:	a0 1d       	adc	r26, r0
    15c4:	08 95       	ret

000015c6 <__prologue_saves__>:
    15c6:	2f 92       	push	r2
    15c8:	3f 92       	push	r3
    15ca:	4f 92       	push	r4
    15cc:	5f 92       	push	r5
    15ce:	6f 92       	push	r6
    15d0:	7f 92       	push	r7
    15d2:	8f 92       	push	r8
    15d4:	9f 92       	push	r9
    15d6:	af 92       	push	r10
    15d8:	bf 92       	push	r11
    15da:	cf 92       	push	r12
    15dc:	df 92       	push	r13
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	ca 1b       	sub	r28, r26
    15f0:	db 0b       	sbc	r29, r27
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	09 94       	ijmp

000015fe <__epilogue_restores__>:
    15fe:	2a 88       	ldd	r2, Y+18	; 0x12
    1600:	39 88       	ldd	r3, Y+17	; 0x11
    1602:	48 88       	ldd	r4, Y+16	; 0x10
    1604:	5f 84       	ldd	r5, Y+15	; 0x0f
    1606:	6e 84       	ldd	r6, Y+14	; 0x0e
    1608:	7d 84       	ldd	r7, Y+13	; 0x0d
    160a:	8c 84       	ldd	r8, Y+12	; 0x0c
    160c:	9b 84       	ldd	r9, Y+11	; 0x0b
    160e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1610:	b9 84       	ldd	r11, Y+9	; 0x09
    1612:	c8 84       	ldd	r12, Y+8	; 0x08
    1614:	df 80       	ldd	r13, Y+7	; 0x07
    1616:	ee 80       	ldd	r14, Y+6	; 0x06
    1618:	fd 80       	ldd	r15, Y+5	; 0x05
    161a:	0c 81       	ldd	r16, Y+4	; 0x04
    161c:	1b 81       	ldd	r17, Y+3	; 0x03
    161e:	aa 81       	ldd	r26, Y+2	; 0x02
    1620:	b9 81       	ldd	r27, Y+1	; 0x01
    1622:	ce 0f       	add	r28, r30
    1624:	d1 1d       	adc	r29, r1
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	ed 01       	movw	r28, r26
    1632:	08 95       	ret

00001634 <_exit>:
    1634:	f8 94       	cli

00001636 <__stop_program>:
    1636:	ff cf       	rjmp	.-2      	; 0x1636 <__stop_program>
